<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__wickr__ctx" kind="group">
    <compoundname>wickr_ctx</compoundname>
    <title>wickr_ctx_t</title>
    <innerclass refid="structwickr__ctx__gen__result" prot="public">wickr_ctx_gen_result</innerclass>
    <innerclass refid="structwickr__ctx__packet" prot="public">wickr_ctx_packet</innerclass>
    <innerclass refid="structwickr__ctx__encode" prot="public">wickr_ctx_encode</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__wickr__ctx_1gaa8904ab3687a22f8d291f5976d05a0e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__ctx__gen__result" kindref="compound">wickr_ctx_gen_result_t</ref> *</type>
        <definition>wickr_ctx_gen_result_t* wickr_ctx_gen_new</definition>
        <argsstring>(const wickr_crypto_engine_t engine, wickr_dev_info_t *dev_info, wickr_buffer_t *identifier)</argsstring>
        <name>wickr_ctx_gen_new</name>
        <param>
          <type>const <ref refid="structwickr__crypto__engine" kindref="compound">wickr_crypto_engine_t</ref></type>
          <declname>engine</declname>
        </param>
        <param>
          <type><ref refid="structwickr__dev__info" kindref="compound">wickr_dev_info_t</ref> *</type>
          <declname>dev_info</declname>
        </param>
        <param>
          <type><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
          <declname>identifier</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Makes a new root and random node identity + context with random keys</para><para>NOTE: The resulting <ref refid="structwickr__ctx__gen__result" kindref="compound">wickr_ctx_gen_result</ref> does not gain ownership over the parameters to this function</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>engine</parametername>
</parameternamelist>
<parameterdescription>
<para>the crypto engine to use for all context operations </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dev_info</parametername>
</parameternamelist>
<parameterdescription>
<para>the device info for which to bind this context to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>identifier</parametername>
</parameternamelist>
<parameterdescription>
<para>a system unique identifier that will represent the root identity that is being generated </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a generation result containing a root identity represented by &apos;identifier&apos; and a node identity signed by &apos;root&apos; with a random set of keys </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/wickr_ctx.h" line="118" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__ctx_1ga458f74fb060fb98da491d733e51fc3ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__ctx__gen__result" kindref="compound">wickr_ctx_gen_result_t</ref> *</type>
        <definition>wickr_ctx_gen_result_t* wickr_ctx_gen_new_with_sig_key</definition>
        <argsstring>(const wickr_crypto_engine_t engine, wickr_dev_info_t *dev_info, wickr_ec_key_t *sig_key, wickr_buffer_t *identifier)</argsstring>
        <name>wickr_ctx_gen_new_with_sig_key</name>
        <param>
          <type>const <ref refid="structwickr__crypto__engine" kindref="compound">wickr_crypto_engine_t</ref></type>
          <declname>engine</declname>
        </param>
        <param>
          <type><ref refid="structwickr__dev__info" kindref="compound">wickr_dev_info_t</ref> *</type>
          <declname>dev_info</declname>
        </param>
        <param>
          <type><ref refid="structwickr__ec__key" kindref="compound">wickr_ec_key_t</ref> *</type>
          <declname>sig_key</declname>
        </param>
        <param>
          <type><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
          <declname>identifier</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Makes a new root and random node identity + context with random keys except for a provided root signing key</para><para>NOTE: The resulting <ref refid="structwickr__ctx__gen__result" kindref="compound">wickr_ctx_gen_result</ref> does not gain ownership over the parameters to this function</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>engine</parametername>
</parameternamelist>
<parameterdescription>
<para>the crypto engine to use for all context operations </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dev_info</parametername>
</parameternamelist>
<parameterdescription>
<para>the device info for which to bind this context to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig_key</parametername>
</parameternamelist>
<parameterdescription>
<para>a signature key to associate with the generated root identity </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>identifier</parametername>
</parameternamelist>
<parameterdescription>
<para>a system unique identifier that will represent the root identity that is being generated </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a generation result containing a root identity represented by &apos;identifier&apos; and a node identity signed by &apos;root&apos; with &apos;sig_key&apos; as the root signing key </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/wickr_ctx.h" line="134" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__ctx_1ga286a513a606b6643f796539413357c34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__ctx__gen__result" kindref="compound">wickr_ctx_gen_result_t</ref> *</type>
        <definition>wickr_ctx_gen_result_t* wickr_ctx_gen_with_root_keys</definition>
        <argsstring>(const wickr_crypto_engine_t engine, wickr_dev_info_t *dev_info, wickr_root_keys_t *root_keys, wickr_buffer_t *identifier)</argsstring>
        <name>wickr_ctx_gen_with_root_keys</name>
        <param>
          <type>const <ref refid="structwickr__crypto__engine" kindref="compound">wickr_crypto_engine_t</ref></type>
          <declname>engine</declname>
        </param>
        <param>
          <type><ref refid="structwickr__dev__info" kindref="compound">wickr_dev_info_t</ref> *</type>
          <declname>dev_info</declname>
        </param>
        <param>
          <type><ref refid="structwickr__root__keys" kindref="compound">wickr_root_keys_t</ref> *</type>
          <declname>root_keys</declname>
        </param>
        <param>
          <type><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
          <declname>identifier</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Makes a new context using an existing root keys set</para><para>NOTE: The resulting <ref refid="structwickr__ctx__gen__result" kindref="compound">wickr_ctx_gen_result</ref> does not gain ownership over the parameters to this function</para><para>This function is used to provision a new node identity onto the system given an existing root identity</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>engine</parametername>
</parameternamelist>
<parameterdescription>
<para>the crypto engine to use for all context operations </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dev_info</parametername>
</parameternamelist>
<parameterdescription>
<para>the device info for which to bind this context to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>root_keys</parametername>
</parameternamelist>
<parameterdescription>
<para>the root keys to use for the generation, the generated node will be signed by the root key&apos;s signing key, and the storage keys will be derived from the root remote / local cipher keys </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>identifier</parametername>
</parameternamelist>
<parameterdescription>
<para>the system unique identifier that was previously associated with root_keys </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a generation result containing an existing root identity represented by &apos;identifier&apos; and a node identity signed by the existing root </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/wickr_ctx.h" line="153" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__ctx_1gaab0b2731d76d6ea91afd1b147c53a29a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__ctx__gen__result" kindref="compound">wickr_ctx_gen_result_t</ref> *</type>
        <definition>wickr_ctx_gen_result_t* wickr_ctx_gen_with_passphrase</definition>
        <argsstring>(const wickr_crypto_engine_t engine, wickr_dev_info_t *dev_info, wickr_buffer_t *exported_recovery_key, wickr_buffer_t *passphrase, wickr_buffer_t *recovery_data, wickr_buffer_t *identifier)</argsstring>
        <name>wickr_ctx_gen_with_passphrase</name>
        <param>
          <type>const <ref refid="structwickr__crypto__engine" kindref="compound">wickr_crypto_engine_t</ref></type>
          <declname>engine</declname>
        </param>
        <param>
          <type><ref refid="structwickr__dev__info" kindref="compound">wickr_dev_info_t</ref> *</type>
          <declname>dev_info</declname>
        </param>
        <param>
          <type><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
          <declname>exported_recovery_key</declname>
        </param>
        <param>
          <type><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
          <declname>passphrase</declname>
        </param>
        <param>
          <type><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
          <declname>recovery_data</declname>
        </param>
        <param>
          <type><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
          <declname>identifier</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Makes a new context using an existing root identity&apos;s exported recovery key and a passphrase</para><para>NOTE: The resulting <ref refid="structwickr__ctx__gen__result" kindref="compound">wickr_ctx_gen_result</ref> does not gain ownership over the parameters to this function</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>engine</parametername>
</parameternamelist>
<parameterdescription>
<para>the crypto engine to use for all context operations </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dev_info</parametername>
</parameternamelist>
<parameterdescription>
<para>the device info for which to bind this context to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exported_recovery_key</parametername>
</parameternamelist>
<parameterdescription>
<para>a previously exported random recovery key that was protected with a KDF using &apos;passphrase&apos; as the key. See &apos;wickr_ctx_gen_export_recovery_key_passphrase&apos; for more information </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>passphrase</parametername>
</parameternamelist>
<parameterdescription>
<para>the passphrase to decode exported_recovery_key with </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recovery_data</parametername>
</parameternamelist>
<parameterdescription>
<para>an export of &apos;root_keys&apos; from a previous context encrypted with recovery_key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>identifier</parametername>
</parameternamelist>
<parameterdescription>
<para>identifier the system unique identifier that was previously associated with the root keys held in &apos;recovery&apos; </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a generation result containing an existing root identity represented by &apos;identifier&apos; and a node identity signed by the existing root. NULL if decoding &apos;exported_recovery_key&apos; or &apos;recovery&apos; fails due to an invalid passphrase </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/wickr_ctx.h" line="174" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__ctx_1ga2e9c63af0e76f1977844ea2dc895e90a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__ctx__gen__result" kindref="compound">wickr_ctx_gen_result_t</ref> *</type>
        <definition>wickr_ctx_gen_result_t* wickr_ctx_gen_with_recovery</definition>
        <argsstring>(const wickr_crypto_engine_t engine, wickr_dev_info_t *dev_info, wickr_buffer_t *recovery_data, wickr_cipher_key_t *recovery_key, wickr_buffer_t *identifier)</argsstring>
        <name>wickr_ctx_gen_with_recovery</name>
        <param>
          <type>const <ref refid="structwickr__crypto__engine" kindref="compound">wickr_crypto_engine_t</ref></type>
          <declname>engine</declname>
        </param>
        <param>
          <type><ref refid="structwickr__dev__info" kindref="compound">wickr_dev_info_t</ref> *</type>
          <declname>dev_info</declname>
        </param>
        <param>
          <type><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
          <declname>recovery_data</declname>
        </param>
        <param>
          <type><ref refid="structwickr__cipher__key" kindref="compound">wickr_cipher_key_t</ref> *</type>
          <declname>recovery_key</declname>
        </param>
        <param>
          <type><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
          <declname>identifier</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Makes a new context using an existing exported root keys and a provided recovery key</para><para>NOTE: The resulting <ref refid="structwickr__ctx__gen__result" kindref="compound">wickr_ctx_gen_result</ref> does not gain ownership over the parameters to this function</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>engine</parametername>
</parameternamelist>
<parameterdescription>
<para>the crypto engine to use for all context operations </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dev_info</parametername>
</parameternamelist>
<parameterdescription>
<para>the device info for which to bind this context to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recovery_data</parametername>
</parameternamelist>
<parameterdescription>
<para>an recovery containing exported root_keys from a previous context using &apos;recovery_key&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recovery_key</parametername>
</parameternamelist>
<parameterdescription>
<para>the key to decrypt &apos;recovery&apos; with to attempt recovery of root_keys to use for context generation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>identifier</parametername>
</parameternamelist>
<parameterdescription>
<para>identifier the system unique identifier that was previously associated with the root keys held in &apos;recovery&apos; </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a generation result containing an existing root identity represented by &apos;identifier&apos; and a node identity signed by the existing root. NULL if decoding &apos;recovery&apos; fails due to an incorrect key </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/wickr_ctx.h" line="195" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__ctx_1ga2dadd40adc0217dd337ee6cf745cbc12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
        <definition>wickr_buffer_t* wickr_ctx_gen_export_recovery_key_passphrase</definition>
        <argsstring>(const wickr_ctx_gen_result_t *result, const wickr_buffer_t *passphrase)</argsstring>
        <name>wickr_ctx_gen_export_recovery_key_passphrase</name>
        <param>
          <type>const <ref refid="structwickr__ctx__gen__result" kindref="compound">wickr_ctx_gen_result_t</ref> *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
          <declname>passphrase</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Exports the recovery key using a KDF + CIPHER function</para><para>For more information on the KDF + CIPHER functionality, review documentation for &apos;wickr_crypto_engine_kdf_cipher&apos;</para><para>Defaults are currently using KDF_SCRYPT_2_17 for a KDF and CIPHER_AES256_GCM for a cipher</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>a context generation result to export the recovery key from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>passphrase</parametername>
</parameternamelist>
<parameterdescription>
<para>the passphrase to use as input to the KDF function </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a buffer that was created by first taking KDF(randomSalt || passphrase) and then using that output as a key that encrypted </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/wickr_ctx.h" line="215" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__ctx_1gaa32727731391f1e3fbde26094924b533" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
        <definition>wickr_buffer_t* wickr_ctx_gen_result_make_recovery</definition>
        <argsstring>(const wickr_ctx_gen_result_t *result)</argsstring>
        <name>wickr_ctx_gen_result_make_recovery</name>
        <param>
          <type>const <ref refid="structwickr__ctx__gen__result" kindref="compound">wickr_ctx_gen_result_t</ref> *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Serializes root keys and ciphers them with the recovery key</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>the context generation result to make an recovery from </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a buffer with a serialized cipher_result generated by encrypting &apos;root_keys&apos; with the &apos;recovery_key&apos; held in &apos;result&apos;. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/wickr_ctx.h" line="234" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__ctx_1ga0bde95494141673604b9e4e1f7954e2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__root__keys" kindref="compound">wickr_root_keys_t</ref> *</type>
        <definition>wickr_root_keys_t* wickr_ctx_gen_import_recovery</definition>
        <argsstring>(const wickr_crypto_engine_t engine, const wickr_buffer_t *recovery_data, const wickr_cipher_key_t *recovery_key)</argsstring>
        <name>wickr_ctx_gen_import_recovery</name>
        <param>
          <type>const <ref refid="structwickr__crypto__engine" kindref="compound">wickr_crypto_engine_t</ref></type>
          <declname>engine</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
          <declname>recovery_data</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__cipher__key" kindref="compound">wickr_cipher_key_t</ref> *</type>
          <declname>recovery_key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>engine</parametername>
</parameternamelist>
<parameterdescription>
<para>a crypto engine that was used to call &apos;wickr_ctx_gen_result_make_recovery&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recovery_data</parametername>
</parameternamelist>
<parameterdescription>
<para>an encrypted recovery as created by &apos;wickr_ctx_gen_result_make_recovery&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recovery_key</parametername>
</parameternamelist>
<parameterdescription>
<para>the recovery key from the &apos;<ref refid="structwickr__ctx__gen__result" kindref="compound">wickr_ctx_gen_result</ref>&apos; that called &apos;wickr_ctx_gen_result_make_recovery&apos; to make &apos;recovery&apos; </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>root keys created from decoding &apos;recovery&apos; with &apos;recovery_key&apos; or NULL if the decryption operation failed </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/wickr_ctx.h" line="244" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__ctx_1gae095a8cb40d209090212136f8580dc77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__ctx__gen__result" kindref="compound">wickr_ctx_gen_result_t</ref> *</type>
        <definition>wickr_ctx_gen_result_t* wickr_ctx_gen_result_copy</definition>
        <argsstring>(const wickr_ctx_gen_result_t *source)</argsstring>
        <name>wickr_ctx_gen_result_copy</name>
        <param>
          <type>const <ref refid="structwickr__ctx__gen__result" kindref="compound">wickr_ctx_gen_result_t</ref> *</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy a context generation result</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>the context generation result to copy </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a newly allocated context generation result holding a deep copy of the properties of &apos;source&apos; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/wickr_ctx.h" line="257" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__ctx_1ga865854408d22e4697eebe5bc129cc6b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wickr_ctx_gen_result_destroy</definition>
        <argsstring>(wickr_ctx_gen_result_t **result)</argsstring>
        <name>wickr_ctx_gen_result_destroy</name>
        <param>
          <type><ref refid="structwickr__ctx__gen__result" kindref="compound">wickr_ctx_gen_result_t</ref> **</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy a context generation result</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to the context generation result to destroy. All properties of &apos;*result&apos; will also be destroyed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/wickr_ctx.h" line="268" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__ctx_1ga085975d71519bf5729a7cf264a5f7876" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__ctx" kindref="compound">wickr_ctx_t</ref> *</type>
        <definition>wickr_ctx_t* wickr_ctx_create</definition>
        <argsstring>(const wickr_crypto_engine_t engine, wickr_dev_info_t *dev_info, wickr_identity_chain_t *id_chain, wickr_storage_keys_t *storage_keys)</argsstring>
        <name>wickr_ctx_create</name>
        <param>
          <type>const <ref refid="structwickr__crypto__engine" kindref="compound">wickr_crypto_engine_t</ref></type>
          <declname>engine</declname>
        </param>
        <param>
          <type><ref refid="structwickr__dev__info" kindref="compound">wickr_dev_info_t</ref> *</type>
          <declname>dev_info</declname>
        </param>
        <param>
          <type><ref refid="structwickr__identity__chain" kindref="compound">wickr_identity_chain_t</ref> *</type>
          <declname>id_chain</declname>
        </param>
        <param>
          <type><ref refid="structwickr__storage__keys" kindref="compound">wickr_storage_keys_t</ref> *</type>
          <declname>storage_keys</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a context from components</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>engine</parametername>
</parameternamelist>
<parameterdescription>
<para>a crypto engine to support context operations </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dev_info</parametername>
</parameternamelist>
<parameterdescription>
<para>the device information the context should be bound to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id_chain</parametername>
</parameternamelist>
<parameterdescription>
<para>the identity chain that belongs to this context and will be used for encoding / decoding messages </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>storage_keys</parametername>
</parameternamelist>
<parameterdescription>
<para>the storage keys used for local and remote ciphers of this context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a newly allocated context owning the passed in parameters </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/wickr_ctx.h" line="283" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__ctx_1gaaa74a32619fb3b382fbeeeddc425a910" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__ctx" kindref="compound">wickr_ctx_t</ref> *</type>
        <definition>wickr_ctx_t* wickr_ctx_copy</definition>
        <argsstring>(const wickr_ctx_t *ctx)</argsstring>
        <name>wickr_ctx_copy</name>
        <param>
          <type>const <ref refid="structwickr__ctx" kindref="compound">wickr_ctx_t</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy a context</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>the context to copy </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a newly allocated context holding a deep copy of the properties of &apos;ctx&apos; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/wickr_ctx.h" line="297" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__ctx_1gaadfdef183c86992efc33b0d730c90327" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wickr_ctx_destroy</definition>
        <argsstring>(wickr_ctx_t **ctx)</argsstring>
        <name>wickr_ctx_destroy</name>
        <param>
          <type><ref refid="structwickr__ctx" kindref="compound">wickr_ctx_t</ref> **</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy a context</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to the context to destroy. All properties of &apos;*ctx&apos; will also be destroyed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/wickr_ctx.h" line="307" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__ctx_1ga67e64bed3fc0a8ee550c0fc24d44c787" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
        <definition>wickr_buffer_t* wickr_ctx_export_storage_keys</definition>
        <argsstring>(const wickr_ctx_t *ctx, const wickr_buffer_t *passphrase)</argsstring>
        <name>wickr_ctx_export_storage_keys</name>
        <param>
          <type>const <ref refid="structwickr__ctx" kindref="compound">wickr_ctx_t</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
          <declname>passphrase</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Exports storage keys for a context using a KDF + CIPHER function</para><para>For more information on the KDF + CIPHER functionality, review documentation for &apos;wickr_crypto_engine_kdf_cipher&apos;</para><para>Defaults are currently using KDF_SCRYPT_2_17 for a KDF and CIPHER_AES256_GCM for a cipher</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>the context to export storage keys from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>passphrase</parametername>
</parameternamelist>
<parameterdescription>
<para>the passphrase to use as input to a KDF that will generated a key to protect storage keys </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a buffer containing exported storage keys </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/wickr_ctx.h" line="321" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__ctx_1gae344e5202193c4b92ee2686529285fe5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__storage__keys" kindref="compound">wickr_storage_keys_t</ref> *</type>
        <definition>wickr_storage_keys_t* wickr_ctx_import_storage_keys</definition>
        <argsstring>(const wickr_crypto_engine_t engine, const wickr_buffer_t *exported, const wickr_buffer_t *passphrase)</argsstring>
        <name>wickr_ctx_import_storage_keys</name>
        <param>
          <type>const <ref refid="structwickr__crypto__engine" kindref="compound">wickr_crypto_engine_t</ref></type>
          <declname>engine</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
          <declname>exported</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
          <declname>passphrase</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Import storage keys exported with &apos;wickr_ctx_export_storage_keys&apos;</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>engine</parametername>
</parameternamelist>
<parameterdescription>
<para>a crypto engine supporting KDF based encryption </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exported</parametername>
</parameternamelist>
<parameterdescription>
<para>keys exported with &apos;wickr_ctx_export_storage_keys&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>passphrase</parametername>
</parameternamelist>
<parameterdescription>
<para>the passphrase used to export storage keys </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>decoded storage keys or NULL if the passphrase is invalid </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/wickr_ctx.h" line="332" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__ctx_1gaeff6704dded2d44f689eca5ad25843f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__cipher__result" kindref="compound">wickr_cipher_result_t</ref> *</type>
        <definition>wickr_cipher_result_t* wickr_ctx_cipher_local</definition>
        <argsstring>(const wickr_ctx_t *ctx, const wickr_buffer_t *plaintext)</argsstring>
        <name>wickr_ctx_cipher_local</name>
        <param>
          <type>const <ref refid="structwickr__ctx" kindref="compound">wickr_ctx_t</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
          <declname>plaintext</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Encrypts data using the local storage key</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>the context to use for encryption </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintext</parametername>
</parameternamelist>
<parameterdescription>
<para>the bytes to encrypt for local storage </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&apos;plaintext&apos; encrypted with the context&apos;s local storage key </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/wickr_ctx.h" line="345" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__ctx_1ga0b985fb2cd05fb482b5ed175dfd650a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__cipher__result" kindref="compound">wickr_cipher_result_t</ref> *</type>
        <definition>wickr_cipher_result_t* wickr_ctx_cipher_remote</definition>
        <argsstring>(const wickr_ctx_t *ctx, const wickr_buffer_t *plaintext)</argsstring>
        <name>wickr_ctx_cipher_remote</name>
        <param>
          <type>const <ref refid="structwickr__ctx" kindref="compound">wickr_ctx_t</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
          <declname>plaintext</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Encrypts data using the remote storage key</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>the context to use for encryption </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintext</parametername>
</parameternamelist>
<parameterdescription>
<para>plaintext the bytes to encrypt for remote storage </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&apos;plaintext&apos; encrypted with the context&apos;s remote storage key </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/wickr_ctx.h" line="364" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__ctx_1gacc1038d3690ba4860b74f13239c65600" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
        <definition>wickr_buffer_t* wickr_ctx_decipher_remote</definition>
        <argsstring>(const wickr_ctx_t *ctx, const wickr_cipher_result_t *cipher_text)</argsstring>
        <name>wickr_ctx_decipher_remote</name>
        <param>
          <type>const <ref refid="structwickr__ctx" kindref="compound">wickr_ctx_t</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__cipher__result" kindref="compound">wickr_cipher_result_t</ref> *</type>
          <declname>cipher_text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Decrypts data using the local storage key</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>the context to use for decryption </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipher_text</parametername>
</parameternamelist>
<parameterdescription>
<para>a cipher result from &apos;wickr_ctx_cipher_remote&apos; </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&apos;cipher_text&apos; decoded with remote storage key </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/wickr_ctx.h" line="375" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__ctx_1ga45b2531085c430942122dcbf45736e10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__ephemeral__keypair" kindref="compound">wickr_ephemeral_keypair_t</ref> *</type>
        <definition>wickr_ephemeral_keypair_t* wickr_ctx_ephemeral_keypair_gen</definition>
        <argsstring>(const wickr_ctx_t *ctx, uint64_t key_id)</argsstring>
        <name>wickr_ctx_ephemeral_keypair_gen</name>
        <param>
          <type>const <ref refid="structwickr__ctx" kindref="compound">wickr_ctx_t</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>key_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generate ephemeral message keypairs</para><para>NOTE: the result of this function should be kept in a local cache to allow for decoding a message that was created with it&apos;s public components. The public buffer of the contained EC key, along with the key_id, and the key signature should be published to a pool for consumption and use by a sender looking to addresss a message to this context</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>the context to use for ephemeral key pair generation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_id</parametername>
</parameternamelist>
<parameterdescription>
<para>the identifier to assign to the generated keypair </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an ephemeral key pair containing the private and public components, signed by the ctx node signing identity </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/wickr_ctx.h" line="388" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__ctx_1ga8ac1e1c9a0b9802d7f259278a09df56c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__ctx__packet" kindref="compound">wickr_ctx_packet_t</ref> *</type>
        <definition>wickr_ctx_packet_t* wickr_ctx_packet_create</definition>
        <argsstring>(wickr_packet_t *packet, wickr_identity_chain_t *sender, wickr_parse_result_t *parse_result)</argsstring>
        <name>wickr_ctx_packet_create</name>
        <param>
          <type><ref refid="structwickr__packet" kindref="compound">wickr_packet_t</ref> *</type>
          <declname>packet</declname>
        </param>
        <param>
          <type><ref refid="structwickr__identity__chain" kindref="compound">wickr_identity_chain_t</ref> *</type>
          <declname>sender</declname>
        </param>
        <param>
          <type><ref refid="structwickr__parse__result" kindref="compound">wickr_parse_result_t</ref> *</type>
          <declname>parse_result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a context packet parse result from components</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>packet</parametername>
</parameternamelist>
<parameterdescription>
<para>see property description from &apos;<ref refid="structwickr__ctx__packet" kindref="compound">wickr_ctx_packet</ref>&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sender</parametername>
</parameternamelist>
<parameterdescription>
<para>see property description from &apos;<ref refid="structwickr__ctx__packet" kindref="compound">wickr_ctx_packet</ref>&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_result</parametername>
</parameternamelist>
<parameterdescription>
<para>see property description from &apos;<ref refid="structwickr__ctx__packet" kindref="compound">wickr_ctx_packet</ref>&apos; </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a newly allocated context packet parse result owning the parameters passed in </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/wickr_ctx.h" line="420" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__ctx_1gad7063bcfca4878d290e598ed6bc22e3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wickr_ctx_packet_destroy</definition>
        <argsstring>(wickr_ctx_packet_t **packet)</argsstring>
        <name>wickr_ctx_packet_destroy</name>
        <param>
          <type><ref refid="structwickr__ctx__packet" kindref="compound">wickr_ctx_packet_t</ref> **</type>
          <declname>packet</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy a packet parse result</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>packet</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to a context packet parse result to destroy. Will destroy the sub properties of &apos;*packet&apos; as well </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/wickr_ctx.h" line="431" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__ctx_1ga810ee459cb0ab1037b5fd1f983d0ded3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__ctx__encode" kindref="compound">wickr_ctx_encode_t</ref> *</type>
        <definition>wickr_ctx_encode_t* wickr_ctx_encode_create</definition>
        <argsstring>(wickr_cipher_key_t *packet_key, wickr_buffer_t *encoded_packet)</argsstring>
        <name>wickr_ctx_encode_create</name>
        <param>
          <type><ref refid="structwickr__cipher__key" kindref="compound">wickr_cipher_key_t</ref> *</type>
          <declname>packet_key</declname>
        </param>
        <param>
          <type><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
          <declname>encoded_packet</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an encode result from components</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>packet_key</parametername>
</parameternamelist>
<parameterdescription>
<para>see property description from &apos;<ref refid="structwickr__ctx__encode" kindref="compound">wickr_ctx_encode</ref>&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>encoded_packet</parametername>
</parameternamelist>
<parameterdescription>
<para>see property description from &apos;<ref refid="structwickr__ctx__encode" kindref="compound">wickr_ctx_encode</ref>&apos; </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a newly allocated encode packet result owning the parameters passed in </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/wickr_ctx.h" line="458" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__ctx_1ga9ed3f7c0f4d672a2ac562b279e2da4e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wickr_ctx_encode_destroy</definition>
        <argsstring>(wickr_ctx_encode_t **encode)</argsstring>
        <name>wickr_ctx_encode_destroy</name>
        <param>
          <type><ref refid="structwickr__ctx__encode" kindref="compound">wickr_ctx_encode_t</ref> **</type>
          <declname>encode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy an encode packet result</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>encode</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to an encode packet result to destroy. Will destroy the sub properties of &apos;*encode&apos; as well </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/wickr_ctx.h" line="467" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__ctx_1ga3766720fd6654fad791a26cd2c1161b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__ctx__encode" kindref="compound">wickr_ctx_encode_t</ref> *</type>
        <definition>wickr_ctx_encode_t* wickr_ctx_encode_packet</definition>
        <argsstring>(const wickr_ctx_t *ctx, const wickr_payload_t *payload, const wickr_node_array_t *nodes)</argsstring>
        <name>wickr_ctx_encode_packet</name>
        <param>
          <type>const <ref refid="structwickr__ctx" kindref="compound">wickr_ctx_t</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__payload" kindref="compound">wickr_payload_t</ref> *</type>
          <declname>payload</declname>
        </param>
        <param>
          <type>const wickr_node_array_t *</type>
          <declname>nodes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Encode a Wickr packet to a set of nodes</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>the context to use to encode &apos;payload&apos; to &apos;nodes&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>payload</parametername>
</parameternamelist>
<parameterdescription>
<para>the metadata and body information to send to &apos;nodes&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nodes</parametername>
</parameternamelist>
<parameterdescription>
<para>the recipient nodes for this packet </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an encode result containing an encrypted Wickr packet that transfers &apos;payload&apos; to &apos;nodes&apos; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/wickr_ctx.h" line="481" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__ctx_1ga5032fb65627a509fd9486ea9696e643d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__ctx__packet" kindref="compound">wickr_ctx_packet_t</ref> *</type>
        <definition>wickr_ctx_packet_t* wickr_ctx_parse_packet</definition>
        <argsstring>(const wickr_ctx_t *ctx, const wickr_buffer_t *packet_buffer, const wickr_identity_chain_t *sender)</argsstring>
        <name>wickr_ctx_parse_packet</name>
        <param>
          <type>const <ref refid="structwickr__ctx" kindref="compound">wickr_ctx_t</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
          <declname>packet_buffer</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__identity__chain" kindref="compound">wickr_identity_chain_t</ref> *</type>
          <declname>sender</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse a Wickr packet into components, fail if the current node&apos;s key exchange is not found</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>the context to use for parsing </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>packet_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer representing the serialized packet that was delivered to &apos;ctx&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sender</parametername>
</parameternamelist>
<parameterdescription>
<para>the sender of the &apos;packet_buffer&apos; </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a parse result holding the parsed information from &apos;packet_buffer&apos; as well as a discovered key exchange from the current ctx node_id. If the packet was not addressed to this context, an error is generated </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/wickr_ctx.h" line="495" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
