<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__wickr__buffer" kind="group">
    <compoundname>wickr_buffer</compoundname>
    <title>wickr_buffer_t</title>
    <innerclass refid="structwickr__buffer" prot="public">wickr_buffer</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__wickr__buffer_1ga305edd191e38eb040710b631c1e4f05f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
        <definition>wickr_buffer_t* wickr_buffer_create_empty</definition>
        <argsstring>(size_t len)</argsstring>
        <name>wickr_buffer_create_empty</name>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Creates an empty buffer of size length. </para>        </briefdescription>
        <detaileddescription>
<para>The bytes in the output are uninitialized</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of bytes the buffer should hold. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a newly allocated buffer holding len bytes, or NULL if allocation fails or len is 0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/buffer.h" line="89" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__buffer_1gaba0ae148a2f75e50eb3d36a4bef509d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
        <definition>wickr_buffer_t* wickr_buffer_create_empty_zero</definition>
        <argsstring>(size_t len)</argsstring>
        <name>wickr_buffer_create_empty_zero</name>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Creates an zeroed empty buffer of size length. </para>        </briefdescription>
        <detaileddescription>
<para>The bytes in the output are initialized to 0</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of bytes the buffer should hold. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a newly allocated buffer holding len bytes, or NULL if allocation fails or len is 0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/buffer.h" line="102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__buffer_1gacc3ad1220af28781bf678cab20e2f1c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
        <definition>wickr_buffer_t* wickr_buffer_create</definition>
        <argsstring>(const uint8_t *bytes, size_t len)</argsstring>
        <name>wickr_buffer_create</name>
        <param>
          <type>const uint8_t *</type>
          <declname>bytes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Creates a buffer by copying an existing pointer to bytes of a specified length len. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>a valid pointer to bytes of at least size len </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of bytes the buffer should hold. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a newly allocated buffer holding len bytes copied from bytes. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/buffer.h" line="114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__buffer_1gada179dda91e748d7bdf6028d3d4c4bcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
        <definition>wickr_buffer_t* wickr_buffer_copy</definition>
        <argsstring>(const wickr_buffer_t *source)</argsstring>
        <name>wickr_buffer_copy</name>
        <param>
          <type>const <ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>Copy a buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer to copy </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a newly allocated buffer containing a copy of the bytes held in source. The new buffer maintains ownership of the copied bytes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/buffer.h" line="125" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__buffer_1gaceb6345c35ac2f6330ea0a685ce3fc53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
        <definition>wickr_buffer_t* wickr_buffer_copy_section</definition>
        <argsstring>(const wickr_buffer_t *source, size_t start, size_t len)</argsstring>
        <name>wickr_buffer_copy_section</name>
        <param>
          <type>const <ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
          <declname>source</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>start</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Create a buffer using a subsection of another buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer to copy bytes out of </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>the offset to start the copy process. Must be within the bounds 0 to source-&gt;length - 1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of bytes to copy out of &apos;source&apos;. start + len must be less than source-&gt;length </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a newly allocated buffer containing the bytes within the range of start to start + len. NULL if start + len exceeds the length of source, or if start is out of bounds </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/buffer.h" line="138" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__buffer_1ga67f817bf762e4ee401b31685197620be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wickr_buffer_modify_section</definition>
        <argsstring>(const wickr_buffer_t *buffer, const uint8_t *bytes, size_t start, size_t len)</argsstring>
        <name>wickr_buffer_modify_section</name>
        <param>
          <type>const <ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>bytes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>start</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Modify a subsection of a buffer. </para>        </briefdescription>
        <detaileddescription>
<para>NOTE: Buffers will not grow to accomidate extra bytes. The size of a buffer is currently fixed and cannot be modified</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to modify </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to bytes to copy into &apos;buffer&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>the position to start overwriting the bytes held by buffer with &apos;bytes&apos;. Must be within the bounds 0 to source-&gt;length - 1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of bytes from &apos;bytes&apos; to copy into the bytes held by &apos;buffer&apos;. start + len must be less than source-&gt;length. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the modification succeeds. false if start is out of range, or start + len is greater than source-&gt;length </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/buffer.h" line="154" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__buffer_1gad7721c1033a1fc378a0a11613f3cfb26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
        <definition>wickr_buffer_t* wickr_buffer_concat</definition>
        <argsstring>(const wickr_buffer_t *buffer1, const wickr_buffer_t *buffer2)</argsstring>
        <name>wickr_buffer_concat</name>
        <param>
          <type>const <ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
          <declname>buffer1</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
          <declname>buffer2</declname>
        </param>
        <briefdescription>
<para>Concatenate two buffers into one new buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer1</parametername>
</parameternamelist>
<parameterdescription>
<para>first source buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer2</parametername>
</parameternamelist>
<parameterdescription>
<para>second source buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a newly allocated buffer containing copied bytes from &apos;buffer1&apos; followed by copied bytes from &apos;buffer2&apos;. NULL if the length of &apos;buffer1&apos; combind with the length of &apos;buffer2&apos; exceeds MAX_BUFFER_SIZE </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/buffer.h" line="167" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__buffer_1ga3aa7ea751a65310184d6c0ea9627dca8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
        <definition>wickr_buffer_t* wickr_buffer_concat_multi</definition>
        <argsstring>(wickr_buffer_t **buffers, uint8_t n_buffers)</argsstring>
        <name>wickr_buffer_concat_multi</name>
        <param>
          <type><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> **</type>
          <declname>buffers</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>n_buffers</declname>
        </param>
        <briefdescription>
<para>Concatenate n buffers. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffers</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to an array of buffers of n length </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_buffers</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of buffers in the array pointed to by buffers </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a newly allocated buffer containing copied bytes from each buffer in &apos;buffers&apos;. NULL if &apos;buffers&apos; contains a NULL or the total number of bytes held by &apos;buffers&apos; exceeds MAX_BUFFER_SIZE </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/buffer.h" line="179" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__buffer_1ga51ec58848ab0b07d164c6f7d73200c24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wickr_buffer_is_equal</definition>
        <argsstring>(const wickr_buffer_t *b1, const wickr_buffer_t *b2, wickr_buffer_compare_func compare_func)</argsstring>
        <name>wickr_buffer_is_equal</name>
        <param>
          <type>const <ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
          <declname>b1</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
          <declname>b2</declname>
        </param>
        <param>
          <type>wickr_buffer_compare_func</type>
          <declname>compare_func</declname>
        </param>
        <briefdescription>
<para>Compare buffers for equality. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b1</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to compare to b2 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b2</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to compare to b1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compare_func</parametername>
</parameternamelist>
<parameterdescription>
<para>the function that will be used to compare the buffers. Passing NULL will result in memcmp being used. Function takes input as const volatile to support constant time memory comparison implemented by many crypto libraries </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the buffers are equal in length and in content </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/buffer.h" line="192" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__buffer_1ga7ec1198db0739f3034ddd3969c64257f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wickr_buffer_destroy</definition>
        <argsstring>(wickr_buffer_t **buffer)</argsstring>
        <name>wickr_buffer_destroy</name>
        <param>
          <type><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> **</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Destroy a buffer. </para>        </briefdescription>
        <detaileddescription>
<para>NOTE: This function does not modify the contents of buffer and simply calls free to deallocate the memory held. To zero out memory before deallocation use &apos;wickr_buffer_destroy_zero&apos;</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer to destroy </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/buffer.h" line="205" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__buffer_1gaf0ff6486debbfd676b7675f6f899fc40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wickr_buffer_destroy_zero</definition>
        <argsstring>(wickr_buffer_t **buffer)</argsstring>
        <name>wickr_buffer_destroy_zero</name>
        <param>
          <type><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> **</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Zero-then-deallocate a buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer to zero out and then destroy </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/buffer.h" line="216" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__wickr__buffer_1ga0cf6db371b58617c9311f2a357d98164" prot="public" static="no">
        <name>BUFFER_ARRAY_LEN</name>
        <param><defname>x</defname></param>
        <initializer>(sizeof(x) / sizeof(<ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *))</initializer>
        <briefdescription>
<para>Determine the number of elements in an array of buffers (wickr_buffer_t **). </para>        </briefdescription>
        <detaileddescription>
<para>NOTE: This function will only work on stack allocated arrays. It is meant only to be used in cases where the length of the array of buffers is determined at compile time, on the stack.</para><para>EXAMPLE: wickr_buffer_t *elements[] = { b1, b2 b3 }.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to an array of wickr_buffer_t elements </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of elements in the array pointed to by x </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/buffer.h" line="71" column="9" bodyfile="src/crypto/buffer.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
