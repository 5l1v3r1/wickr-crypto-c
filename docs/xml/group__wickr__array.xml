<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__wickr__array" kind="group">
    <compoundname>wickr_array</compoundname>
    <title>wickr_array_t</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__wickr__array_1gad5842105c20b42cc4b5b4ffc2a72556b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wickr_array_t *</type>
        <definition>wickr_array_t* wickr_array_new</definition>
        <argsstring>(uint32_t item_count, uint8_t item_type, wickr_array_copy_func item_copy_func, wickr_array_destroy_func item_destroy_func)</argsstring>
        <name>wickr_array_new</name>
        <param>
          <type>uint32_t</type>
          <declname>item_count</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>item_type</declname>
        </param>
        <param>
          <type>wickr_array_copy_func</type>
          <declname>item_copy_func</declname>
        </param>
        <param>
          <type>wickr_array_destroy_func</type>
          <declname>item_destroy_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new array</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item_count</parametername>
</parameternamelist>
<parameterdescription>
<para>number of items the array will hold </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>item_type</parametername>
</parameternamelist>
<parameterdescription>
<para>an integer that will designate the type of item the array will hold. All items in the array must be of the same type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>item_copy_func</parametername>
</parameternamelist>
<parameterdescription>
<para>a function that will provide a deep copy of an item in the array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>item_destroy_func</parametername>
</parameternamelist>
<parameterdescription>
<para>a function that will provide freeing memory consumed by an item in the array </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a newly allocated array </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/array.h" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__array_1gafe1191ce494529dbfd5240a84bcba5a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t wickr_array_get_item_count</definition>
        <argsstring>(const wickr_array_t *array)</argsstring>
        <name>wickr_array_get_item_count</name>
        <param>
          <type>const wickr_array_t *</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fetch the size of the array</para><para>Note that null values in the array, or uninitialized values in the array will still be counted. The size of the array remains static after it has been created with wickr_array_new. Increasing or decreasing the size of the array is not yet supported</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>an array to get the item count of </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of items contained in the array </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/array.h" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__array_1ga3b3c15b3c6a15f52d20c678b6829ee21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wickr_array_set_item</definition>
        <argsstring>(wickr_array_t *array, uint32_t index, void *item, bool copy)</argsstring>
        <name>wickr_array_set_item</name>
        <param>
          <type>wickr_array_t *</type>
          <declname>array</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>item</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>copy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Assign an item to a specified index in the array</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>the array the item is being set into </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the position in the array the item is being set into </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>the item that will be set in the array at the specified index </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>copy</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, a deep copy of the item will be made, and the copy will be inserted into the array </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the index is within the bounds of the array, and item points to a valid pointer, will return false if copy is set and the copy operation fails </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/array.h" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__array_1ga3a6dd3ee6295f6230e2047584a261774" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* wickr_array_fetch_item</definition>
        <argsstring>(const wickr_array_t *array, uint32_t index, bool copy)</argsstring>
        <name>wickr_array_fetch_item</name>
        <param>
          <type>const wickr_array_t *</type>
          <declname>array</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>copy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fetch an item at a specified index</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>the array from which an item will be fetched </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the position in the array the item will be fetched from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>copy</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, a deep copy will be made and returned instead of the item stored in the array </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the item in the array at position &apos;index&apos;. NULL is returned if the index is not within the bounds of the array, if the item at position &apos;index&apos; is NULL because it was never set with &apos;wickr_array_set_item&apos;, or because copy was true and the copy operation failed </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/array.h" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__array_1ga1e28a815bd4310985e493b67f66f26c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wickr_array_t *</type>
        <definition>wickr_array_t* wickr_array_copy</definition>
        <argsstring>(const wickr_array_t *array, bool deep_copy)</argsstring>
        <name>wickr_array_copy</name>
        <param>
          <type>const wickr_array_t *</type>
          <declname>array</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>deep_copy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Make a copy</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>the array that is being copied </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deep_copy</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, items inserted into the copied array will be a deep copy of items in the original array. If false, items in the original array will be inserted into the new array without transferring ownership </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a copy of the array, or NULL if either allocating the copied array fails, or the deep_copy flag is set, and the copy operation fails on one of the items in the source array </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/array.h" line="106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__array_1ga984338e0a278ef1b23aca7330f0bfcc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wickr_array_destroy</definition>
        <argsstring>(wickr_array_t **array, bool destroy_items)</argsstring>
        <name>wickr_array_destroy</name>
        <param>
          <type>wickr_array_t **</type>
          <declname>array</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>destroy_items</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Free an array</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>the array to destroy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destroy_items</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, the destroy function specified in &apos;wickr_array_create&apos; will be called on each item in the array before destroying the array itself </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/array.h" line="116" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
