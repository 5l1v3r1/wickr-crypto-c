<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__wickr__root__keys" kind="group">
    <compoundname>Wickr_root_keys</compoundname>
    <title>Wickr_root_keys</title>
    <innerclass refid="structwickr__root__keys" prot="public">wickr_root_keys</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__wickr__root__keys_1gab6289774ce4bcbdc08584695f9b7c34c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__root__keys" kindref="compound">wickr_root_keys_t</ref> *</type>
        <definition>wickr_root_keys_t* wickr_root_keys_create</definition>
        <argsstring>(wickr_ec_key_t *node_signature_root, wickr_cipher_key_t *node_storage_root, wickr_cipher_key_t *remote_storage_root)</argsstring>
        <name>wickr_root_keys_create</name>
        <param>
          <type><ref refid="structwickr__ec__key" kindref="compound">wickr_ec_key_t</ref> *</type>
          <declname>node_signature_root</declname>
        </param>
        <param>
          <type><ref refid="structwickr__cipher__key" kindref="compound">wickr_cipher_key_t</ref> *</type>
          <declname>node_storage_root</declname>
        </param>
        <param>
          <type><ref refid="structwickr__cipher__key" kindref="compound">wickr_cipher_key_t</ref> *</type>
          <declname>remote_storage_root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a root key set from components</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_signature_root</parametername>
</parameternamelist>
<parameterdescription>
<para>see &apos;<ref refid="structwickr__root__keys" kindref="compound">wickr_root_keys</ref>&apos; property documentation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node_storage_root</parametername>
</parameternamelist>
<parameterdescription>
<para>see &apos;<ref refid="structwickr__root__keys" kindref="compound">wickr_root_keys</ref>&apos; property documentation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>remote_storage_root</parametername>
</parameternamelist>
<parameterdescription>
<para>see &apos;<ref refid="structwickr__root__keys" kindref="compound">wickr_root_keys</ref>&apos; property documentation </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a newly allocated root key set. Takes ownership of the passed inputs </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/root_keys.h" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__root__keys_1gac6d33868c25a85e5da5cff92a4eab189" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__root__keys" kindref="compound">wickr_root_keys_t</ref> *</type>
        <definition>wickr_root_keys_t* wickr_root_keys_generate</definition>
        <argsstring>(const wickr_crypto_engine_t *engine)</argsstring>
        <name>wickr_root_keys_generate</name>
        <param>
          <type>const <ref refid="structwickr__crypto__engine" kindref="compound">wickr_crypto_engine_t</ref> *</type>
          <declname>engine</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generate a random set of root keys</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>engine</parametername>
</parameternamelist>
<parameterdescription>
<para>a crypto engine supporting random EC and cipher key generation </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a random set of root keys </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/root_keys.h" line="79" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__root__keys_1ga5ab25c65aa25fbe96d978f8e06376653" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__root__keys" kindref="compound">wickr_root_keys_t</ref> *</type>
        <definition>wickr_root_keys_t* wickr_root_keys_create_from_buffer</definition>
        <argsstring>(const wickr_crypto_engine_t *engine, const wickr_buffer_t *buffer)</argsstring>
        <name>wickr_root_keys_create_from_buffer</name>
        <param>
          <type>const <ref refid="structwickr__crypto__engine" kindref="compound">wickr_crypto_engine_t</ref> *</type>
          <declname>engine</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a root key set from the serialized output of &apos;wickr_root_keys_serialize&apos;</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>engine</parametername>
</parameternamelist>
<parameterdescription>
<para>a crypto engine to validate the decoded EC keys </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>a buffer containing serialized root keys </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a root key set parsed out of buffer, or NULL if parsing fails </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/root_keys.h" line="90" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__root__keys_1ga6875c9f677c4ec127276714976a623a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
        <definition>wickr_buffer_t* wickr_root_keys_serialize</definition>
        <argsstring>(const wickr_root_keys_t *keys)</argsstring>
        <name>wickr_root_keys_serialize</name>
        <param>
          <type>const <ref refid="structwickr__root__keys" kindref="compound">wickr_root_keys_t</ref> *</type>
          <declname>keys</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Serialize root keys into a buffer</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keys</parametername>
</parameternamelist>
<parameterdescription>
<para>the keys to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a buffer containing serialized root keys as a protocol buffer object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/root_keys.h" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__root__keys_1ga6e3a04e7e1c65ada93450051eb4f4459" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__cipher__result" kindref="compound">wickr_cipher_result_t</ref> *</type>
        <definition>wickr_cipher_result_t* wickr_root_keys_export</definition>
        <argsstring>(const wickr_root_keys_t *keys, const wickr_crypto_engine_t *engine, const wickr_cipher_key_t *export_key)</argsstring>
        <name>wickr_root_keys_export</name>
        <param>
          <type>const <ref refid="structwickr__root__keys" kindref="compound">wickr_root_keys_t</ref> *</type>
          <declname>keys</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__crypto__engine" kindref="compound">wickr_crypto_engine_t</ref> *</type>
          <declname>engine</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__cipher__key" kindref="compound">wickr_cipher_key_t</ref> *</type>
          <declname>export_key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Serialize and encrypt root keys</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keys</parametername>
</parameternamelist>
<parameterdescription>
<para>the keys to serialize and encrypt </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>engine</parametername>
</parameternamelist>
<parameterdescription>
<para>a crypto engine capable of encrypting data using &apos;export_key&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>export_key</parametername>
</parameternamelist>
<parameterdescription>
<para>the key to use for encryption of the serialized keys </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a cipher result of serialized &apos;keys&apos; encrypted with &apos;export_key&apos; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/root_keys.h" line="111" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__root__keys_1gaa34dd6c85c667b8b7fb025f56c7bcc46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__storage__keys" kindref="compound">wickr_storage_keys_t</ref> *</type>
        <definition>wickr_storage_keys_t* wickr_root_keys_localize</definition>
        <argsstring>(const wickr_root_keys_t *keys, const wickr_crypto_engine_t *engine, const wickr_dev_info_t *dev_info)</argsstring>
        <name>wickr_root_keys_localize</name>
        <param>
          <type>const <ref refid="structwickr__root__keys" kindref="compound">wickr_root_keys_t</ref> *</type>
          <declname>keys</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__crypto__engine" kindref="compound">wickr_crypto_engine_t</ref> *</type>
          <declname>engine</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__dev__info" kindref="compound">wickr_dev_info_t</ref> *</type>
          <declname>dev_info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a root key set into a storage key set for a local device</para><para>Currently the local storage key is created by taking SHA256(keys-&gt;node_storage_root || dev_info-&gt;system_salt)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keys</parametername>
</parameternamelist>
<parameterdescription>
<para>the keys to convert </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>engine</parametername>
</parameternamelist>
<parameterdescription>
<para>a crypto engine to use for conversion </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dev_info</parametername>
</parameternamelist>
<parameterdescription>
<para>the device to localize the keys to </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a set of storage keys bound to &apos;dev_info&apos; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/root_keys.h" line="125" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__root__keys_1gadda1b8fd1b5cc1cf6b7b2b0e72912858" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__root__keys" kindref="compound">wickr_root_keys_t</ref> *</type>
        <definition>wickr_root_keys_t* wickr_root_keys_copy</definition>
        <argsstring>(const wickr_root_keys_t *source)</argsstring>
        <name>wickr_root_keys_copy</name>
        <param>
          <type>const <ref refid="structwickr__root__keys" kindref="compound">wickr_root_keys_t</ref> *</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy a root key set</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>the root key set to copy </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a newly allocated root key set holding a deep copy of the properties of &apos;source&apos; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/root_keys.h" line="136" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__root__keys_1gacabc33b7c56cbc84a5085d0a4330694f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wickr_root_keys_destroy</definition>
        <argsstring>(wickr_root_keys_t **keys)</argsstring>
        <name>wickr_root_keys_destroy</name>
        <param>
          <type><ref refid="structwickr__root__keys" kindref="compound">wickr_root_keys_t</ref> **</type>
          <declname>keys</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy a root key set</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keys</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to a root key set to destroy. Will destroy the sub properties of &apos;*keys&apos; as well </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/root_keys.h" line="145" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
