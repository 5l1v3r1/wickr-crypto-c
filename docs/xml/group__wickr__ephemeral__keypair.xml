<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__wickr__ephemeral__keypair" kind="group">
    <compoundname>wickr_ephemeral_keypair</compoundname>
    <title>wickr_ephemeral_keypair_t</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__wickr__ephemeral__keypair_1gab956214203938b4b02b8f30666eaec3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__ephemeral__keypair" kindref="compound">wickr_ephemeral_keypair_t</ref> *</type>
        <definition>wickr_ephemeral_keypair_t* wickr_ephemeral_keypair_create</definition>
        <argsstring>(uint64_t identifier, wickr_ec_key_t *ec_key, wickr_ecdsa_result_t *signature)</argsstring>
        <name>wickr_ephemeral_keypair_create</name>
        <param>
          <type>uint64_t</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type><ref refid="structwickr__ec__key" kindref="compound">wickr_ec_key_t</ref> *</type>
          <declname>ec_key</declname>
        </param>
        <param>
          <type><ref refid="structwickr__ecdsa__result" kindref="compound">wickr_ecdsa_result_t</ref> *</type>
          <declname>signature</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an Ephemeral Keypair from components</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>identifier</parametername>
</parameternamelist>
<parameterdescription>
<para>the numerical identifier of the keypair </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ec_key</parametername>
</parameternamelist>
<parameterdescription>
<para>an Elliptical Curve public keypair </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>signature</parametername>
</parameternamelist>
<parameterdescription>
<para>a signature of the public key material in &apos;ec_key&apos; by the owner of this key </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a newly allocated Ephemeral Keypair, owning the properties that were passed in </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/ephemeral_keypair.h" line="79" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__ephemeral__keypair_1gacf14f050221091093b9a2948bd569662" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__ephemeral__keypair" kindref="compound">wickr_ephemeral_keypair_t</ref> *</type>
        <definition>wickr_ephemeral_keypair_t* wickr_ephemeral_keypair_copy</definition>
        <argsstring>(const wickr_ephemeral_keypair_t *source)</argsstring>
        <name>wickr_ephemeral_keypair_copy</name>
        <param>
          <type>const <ref refid="structwickr__ephemeral__keypair" kindref="compound">wickr_ephemeral_keypair_t</ref> *</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy an ephemeral keypair</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>the ephemeral key pair to copy </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a newly allocated ephemeral key pair holding a deep copy of the properties of &apos;source&apos; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/ephemeral_keypair.h" line="90" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__ephemeral__keypair_1ga6c0935c579e3d4bdbfeada7cb60c2a1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__ephemeral__keypair" kindref="compound">wickr_ephemeral_keypair_t</ref> *</type>
        <definition>wickr_ephemeral_keypair_t* wickr_ephemeral_keypair_generate_identity</definition>
        <argsstring>(const wickr_crypto_engine_t *engine, uint64_t identifier, const wickr_identity_t *identity)</argsstring>
        <name>wickr_ephemeral_keypair_generate_identity</name>
        <param>
          <type>const <ref refid="structwickr__crypto__engine" kindref="compound">wickr_crypto_engine_t</ref> *</type>
          <declname>engine</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__identity" kindref="compound">wickr_identity_t</ref> *</type>
          <declname>identity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generate a new ephemeral key pair given an owner identity.</para><para>This method will use the &apos;default_curve&apos; property of the crypto engine provided as the curve for the resulting keypair</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>engine</parametername>
</parameternamelist>
<parameterdescription>
<para>crypto engine supporting random Elliptical Curve generation, and ECDSA signatures </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>identifier</parametername>
</parameternamelist>
<parameterdescription>
<para>the identifier to assign to the generated output keypair </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>identity</parametername>
</parameternamelist>
<parameterdescription>
<para>the identity to sign the generated output key pair with </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a newly generated random Elliptical Curve key pair with identifier &apos;identifier&apos; and a signature using the &apos;sig_key&apos; property of the identity provided as the signing key </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/ephemeral_keypair.h" line="105" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__ephemeral__keypair_1gadc17110d4c7fa65a9456fae516bf2e5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wickr_ephemeral_keypair_verify_owner</definition>
        <argsstring>(const wickr_ephemeral_keypair_t *keypair, const wickr_crypto_engine_t *engine, const wickr_identity_t *owner)</argsstring>
        <name>wickr_ephemeral_keypair_verify_owner</name>
        <param>
          <type>const <ref refid="structwickr__ephemeral__keypair" kindref="compound">wickr_ephemeral_keypair_t</ref> *</type>
          <declname>keypair</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__crypto__engine" kindref="compound">wickr_crypto_engine_t</ref> *</type>
          <declname>engine</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__identity" kindref="compound">wickr_identity_t</ref> *</type>
          <declname>owner</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Verify the owner of an ephemeral key pair is a particular identity</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keypair</parametername>
</parameternamelist>
<parameterdescription>
<para>the key pair to verify the owner of </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>engine</parametername>
</parameternamelist>
<parameterdescription>
<para>a crypto engine that supports verifying signatures generated with the curve associated with the &apos;sig_key&apos; property of owner </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>owner</parametername>
</parameternamelist>
<parameterdescription>
<para>the proposed owner of this keypair </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the signature of key pair can be verified with the sig_key of owner </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/ephemeral_keypair.h" line="118" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__ephemeral__keypair_1ga2e2f8db184aa2972ef5423e9c03988e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wickr_ephemeral_keypair_make_public</definition>
        <argsstring>(const wickr_ephemeral_keypair_t *keypair)</argsstring>
        <name>wickr_ephemeral_keypair_make_public</name>
        <param>
          <type>const <ref refid="structwickr__ephemeral__keypair" kindref="compound">wickr_ephemeral_keypair_t</ref> *</type>
          <declname>keypair</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy the private components of the keypair</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keypair</parametername>
</parameternamelist>
<parameterdescription>
<para>the key pair to make public </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/ephemeral_keypair.h" line="128" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__ephemeral__keypair_1gab77107c0b1a0d145c606817eeecec63d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wickr_ephemeral_keypair_destroy</definition>
        <argsstring>(wickr_ephemeral_keypair_t **keypair)</argsstring>
        <name>wickr_ephemeral_keypair_destroy</name>
        <param>
          <type><ref refid="structwickr__ephemeral__keypair" kindref="compound">wickr_ephemeral_keypair_t</ref> **</type>
          <declname>keypair</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy an ephemeral keypair</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keypair</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to the key pair to destroy. All properties of &apos;*keypair&apos; will also be destroyed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/ephemeral_keypair.h" line="138" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
