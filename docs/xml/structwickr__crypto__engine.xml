<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structwickr__crypto__engine" kind="struct" language="C++" prot="public">
    <compoundname>wickr_crypto_engine</compoundname>
    <includes refid="crypto__engine_8h" local="no">crypto_engine.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structwickr__crypto__engine_1a2145e35235dc5c5c944f33ea3d2963bd" prot="public" static="no" mutable="no">
        <type><ref refid="structwickr__ec__curve" kindref="compound">wickr_ec_curve_t</ref></type>
        <definition>wickr_crypto_engine::default_curve</definition>
        <argsstring></argsstring>
        <name>default_curve</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>the curve to use when generating packets, message keys or a new context </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/crypto_engine.h" line="56" column="1" bodyfile="src/crypto/crypto_engine.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structwickr__crypto__engine_1a307f7d46b55b1e0a93ce9d9489ba8fc5" prot="public" static="no" mutable="no">
        <type><ref refid="structwickr__cipher" kindref="compound">wickr_cipher_t</ref></type>
        <definition>wickr_crypto_engine::default_cipher</definition>
        <argsstring></argsstring>
        <name>default_cipher</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>the cipher to use by default for packets, local, and remote information </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/crypto_engine.h" line="57" column="1" bodyfile="src/crypto/crypto_engine.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__wickr__crypto__engine_1gae12855853c05caa473e748a62611d307" prot="public" static="no" mutable="no">
        <type><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *(*</type>
        <definition>wickr_buffer_t*(* wickr_crypto_engine::wickr_crypto_engine_crypto_random) (size_t len)</definition>
        <argsstring>)(size_t len)</argsstring>
        <name>wickr_crypto_engine_crypto_random</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generate secure random bytes</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of bytes to generate </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a buffer containing &apos;len&apos; secure random bytes or NULL if random byte generation fails </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/crypto_engine.h" line="67" column="1" bodyfile="src/crypto/crypto_engine.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__wickr__crypto__engine_1gabc120effc5248a491b18138f9b74b526" prot="public" static="no" mutable="no">
        <type><ref refid="structwickr__cipher__key" kindref="compound">wickr_cipher_key_t</ref> *(*</type>
        <definition>wickr_cipher_key_t*(* wickr_crypto_engine::wickr_crypto_engine_cipher_key_random) (wickr_cipher_t cipher)</definition>
        <argsstring>)(wickr_cipher_t cipher)</argsstring>
        <name>wickr_crypto_engine_cipher_key_random</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generate a secure random cipher key for a particular cipher</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cipher</parametername>
</parameternamelist>
<parameterdescription>
<para>the cipher to generate a random key for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a cipher key containing key material generated by a secure random function or NULL if random byte generation fails </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/crypto_engine.h" line="77" column="1" bodyfile="src/crypto/crypto_engine.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__wickr__crypto__engine_1gaf7be0d0ca0d9e7a0c5c3b1ec0fd0918e" prot="public" static="no" mutable="no">
        <type><ref refid="structwickr__cipher__result" kindref="compound">wickr_cipher_result_t</ref> *(*</type>
        <definition>wickr_cipher_result_t*(* wickr_crypto_engine::wickr_crypto_engine_cipher_encrypt) (const wickr_buffer_t *plaintext, const wickr_buffer_t *aad, const wickr_cipher_key_t *key, const wickr_buffer_t *iv)</definition>
        <argsstring>)(const wickr_buffer_t *plaintext, const wickr_buffer_t *aad, const wickr_cipher_key_t *key, const wickr_buffer_t *iv)</argsstring>
        <name>wickr_crypto_engine_cipher_encrypt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Encrypt a buffer</para><para>NOTE: IV is randomly chosen using a secure random function if one is not provided</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plaintext</parametername>
</parameternamelist>
<parameterdescription>
<para>the content to encrypt using &apos;key&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aad</parametername>
</parameternamelist>
<parameterdescription>
<para>additional data to authenticate with the ciphertext (only works with authenticated ciphers) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>the cipher key to use to encrypt &apos;plaintext&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iv</parametername>
</parameternamelist>
<parameterdescription>
<para>an initialization vector to use with the cipher mode, or NULL if one should be chosen at random </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a cipher result containing encrypted bytes, or NULL if the cipher mode fails or is not supported </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/crypto_engine.h" line="92" column="1" bodyfile="src/crypto/crypto_engine.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__wickr__crypto__engine_1ga459ef821cc40edb5e3c9ce1d571ddc00" prot="public" static="no" mutable="no">
        <type><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *(*</type>
        <definition>wickr_buffer_t*(* wickr_crypto_engine::wickr_crypto_engine_cipher_decrypt) (const wickr_cipher_result_t *cipher_result, const wickr_buffer_t *aad, const wickr_cipher_key_t *key, bool only_auth_ciphers)</definition>
        <argsstring>)(const wickr_cipher_result_t *cipher_result, const wickr_buffer_t *aad, const wickr_cipher_key_t *key, bool only_auth_ciphers)</argsstring>
        <name>wickr_crypto_engine_cipher_decrypt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Decrypt a cipher_result</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cipher_result</parametername>
</parameternamelist>
<parameterdescription>
<para>a cipher result generated from &apos;wickr_crypto_engine_cipher_encrypt&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aad</parametername>
</parameternamelist>
<parameterdescription>
<para>additional data to authenticate with the ciphertext (only works with authenticated ciphers) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>the key to use to attempt to decrypt &apos;cipher_result&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>only_auth_ciphers</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, only authenticated ciphers may be used for decryption </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a buffer containing decrypted bytes. If the AES mode is authenticated, NULL will be returned if key is incorrect. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/crypto_engine.h" line="108" column="1" bodyfile="src/crypto/crypto_engine.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__wickr__crypto__engine_1gaa77b1bc373d92d9db9d801bcc4a4d29c" prot="public" static="no" mutable="no">
        <type>bool(*</type>
        <definition>bool(* wickr_crypto_engine::wickr_crypto_engine_encrypt_file) (const wickr_cipher_key_t *key, const char *sourceFilePath, const char *destinationFilePath)</definition>
        <argsstring>)(const wickr_cipher_key_t *key, const char *sourceFilePath, const char *destinationFilePath)</argsstring>
        <name>wickr_crypto_engine_encrypt_file</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Encrypt a file</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in_file</parametername>
</parameternamelist>
<parameterdescription>
<para>the file to encrypt </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>the key to use for encryption </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_file</parametername>
</parameternamelist>
<parameterdescription>
<para>a file that should contain the encrypted data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if encryption succeeds, and &apos;out_file&apos; can be written </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/crypto_engine.h" line="123" column="1" bodyfile="src/crypto/crypto_engine.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__wickr__crypto__engine_1ga361b843efc839e30f90ce24c15b1dd27" prot="public" static="no" mutable="no">
        <type>bool(*</type>
        <definition>bool(* wickr_crypto_engine::wickr_crypto_engine_decrypt_file) (const wickr_cipher_key_t *key, const char *sourceFilePath, const char *destinationFilePath, bool only_auth_ciphers)</definition>
        <argsstring>)(const wickr_cipher_key_t *key, const char *sourceFilePath, const char *destinationFilePath, bool only_auth_ciphers)</argsstring>
        <name>wickr_crypto_engine_decrypt_file</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Decrypt a file</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in_file</parametername>
</parameternamelist>
<parameterdescription>
<para>the encrypted file to decrypt </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>the key to use for decryption </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_file</parametername>
</parameternamelist>
<parameterdescription>
<para>the file to write the decrypted data from &apos;in_file&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>only_auth_ciphers</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, only authenticated ciphers may be used for decryption </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the decryption operation succeeds, and &apos;out_file&apos; can be written </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/crypto_engine.h" line="139" column="1" bodyfile="src/crypto/crypto_engine.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__wickr__crypto__engine_1ga42dfc5b4df166616d962ee4c792ceaf4" prot="public" static="no" mutable="no">
        <type><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *(*</type>
        <definition>wickr_buffer_t*(* wickr_crypto_engine::wickr_crypto_engine_digest) (const wickr_buffer_t *buffer, const wickr_buffer_t *salt, wickr_digest_t digest_mode)</definition>
        <argsstring>)(const wickr_buffer_t *buffer, const wickr_buffer_t *salt, wickr_digest_t digest_mode)</argsstring>
        <name>wickr_crypto_engine_digest</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate a hash of a buffer using an optional salt value</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer to hash </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>salt</parametername>
</parameternamelist>
<parameterdescription>
<para>a salt value mix with buffer before taking the hash Passing NULL will allow for no salt to be used </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>the mode of the hash </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a buffer containing the derived hash or NULL if the hashing operation fails </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/crypto_engine.h" line="155" column="1" bodyfile="src/crypto/crypto_engine.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__wickr__crypto__engine_1ga298d2dea6722151c11e04458d3924823" prot="public" static="no" mutable="no">
        <type><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *(*</type>
        <definition>wickr_buffer_t*(* wickr_crypto_engine::wickr_crypto_engine_digest_file) (FILE *in_file, const wickr_digest_t mode)</definition>
        <argsstring>)(FILE *in_file, const wickr_digest_t mode)</argsstring>
        <name>wickr_crypto_engine_digest_file</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the hash of a file</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in_file</parametername>
</parameternamelist>
<parameterdescription>
<para>a file to take the hash of it&apos;s contents </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>the mode to use for calculating the hash </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a buffer containing the output of the chosen mode of the contents of in_file </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/crypto_engine.h" line="168" column="1" bodyfile="src/crypto/crypto_engine.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__wickr__crypto__engine_1gad16b229b7d16cf00d3983c277ee3b88b" prot="public" static="no" mutable="no">
        <type><ref refid="structwickr__ec__key" kindref="compound">wickr_ec_key_t</ref> *(*</type>
        <definition>wickr_ec_key_t*(* wickr_crypto_engine::wickr_crypto_engine_ec_rand_key) (wickr_ec_curve_t curve)</definition>
        <argsstring>)(wickr_ec_curve_t curve)</argsstring>
        <name>wickr_crypto_engine_ec_rand_key</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generate a random Elliptical Curve keypair</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>curve</parametername>
</parameternamelist>
<parameterdescription>
<para>the curve parameters to use for random key pair generation </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a random Elliptical Curve key pair or NULL if the random generation fails </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/crypto_engine.h" line="179" column="1" bodyfile="src/crypto/crypto_engine.h" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__wickr__crypto__engine_1ga87a069bbd3cdf509946e4ca0ca008f8f" prot="public" static="no" mutable="no">
        <type><ref refid="structwickr__ec__key" kindref="compound">wickr_ec_key_t</ref> *(*</type>
        <definition>wickr_ec_key_t*(* wickr_crypto_engine::wickr_crypto_engine_ec_key_import) (const wickr_buffer_t *buffer, bool is_private)</definition>
        <argsstring>)(const wickr_buffer_t *buffer, bool is_private)</argsstring>
        <name>wickr_crypto_engine_ec_key_import</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Import an Elliptical Curve key from a buffer</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer representing Elliptical Curve key material </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_private</parametername>
</parameternamelist>
<parameterdescription>
<para>false if the buffer represents a public key </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an Elliptical Curve key pair parsed from buffer or NULL if buffer does not contain a valid key, or is_private is incorrectly set </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/crypto_engine.h" line="190" column="1" bodyfile="src/crypto/crypto_engine.h" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__wickr__crypto__engine_1gac5a36d2a53e06a75a2b818e6a5cc96a1" prot="public" static="no" mutable="no">
        <type><ref refid="structwickr__ecdsa__result" kindref="compound">wickr_ecdsa_result_t</ref> *(*</type>
        <definition>wickr_ecdsa_result_t*(* wickr_crypto_engine::wickr_crypto_engine_ec_sign) (const wickr_ec_key_t *ec_signing_key, const wickr_buffer_t *data_to_sign, const wickr_digest_t digest_mode)</definition>
        <argsstring>)(const wickr_ec_key_t *ec_signing_key, const wickr_buffer_t *data_to_sign, const wickr_digest_t digest_mode)</argsstring>
        <name>wickr_crypto_engine_ec_sign</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sign data using an Elliptical Curve key Data is hashed before signing. This function will calculate ECDSA(SHA2(data_to_sign))</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ec_signing_key</parametername>
</parameternamelist>
<parameterdescription>
<para>private signing key to use for the ECDSA algorithm </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_to_sign</parametername>
</parameternamelist>
<parameterdescription>
<para>the data to hash with &apos;digest_mode&apos;, and then sign with &apos;ec_signing_key&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>digest_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>the digest mode to use for SHA2 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an ecdsa result containing the output of ECDSA(SHA2(data_to_sign)) or NULL if the &apos;ec_signing_key&apos; is not a private key </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/crypto_engine.h" line="204" column="1" bodyfile="src/crypto/crypto_engine.h" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__wickr__crypto__engine_1gae541acc6433f6f5ffe84382ccd5e4f97" prot="public" static="no" mutable="no">
        <type>bool(*</type>
        <definition>bool(* wickr_crypto_engine::wickr_crypto_engine_ec_verify) (const wickr_ecdsa_result_t *signature, const wickr_ec_key_t *ec_public_key, const wickr_buffer_t *data_to_verify)</definition>
        <argsstring>)(const wickr_ecdsa_result_t *signature, const wickr_ec_key_t *ec_public_key, const wickr_buffer_t *data_to_verify)</argsstring>
        <name>wickr_crypto_engine_ec_verify</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Verify ECDSA signatures</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>signature</parametername>
</parameternamelist>
<parameterdescription>
<para>a signature produced with &apos;wickr_crypto_engine_ec_sign&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ec_public_key</parametername>
</parameternamelist>
<parameterdescription>
<para>the public signing key to use for verification </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_to_verify</parametername>
</parameternamelist>
<parameterdescription>
<para>the original data that should have been signed with &apos;ec_public_key&apos;. It will be hashed inside this function as part of the verification process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if &apos;signature&apos; can be verified by &apos;ec_public_key&apos; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/crypto_engine.h" line="218" column="1" bodyfile="src/crypto/crypto_engine.h" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__wickr__crypto__engine_1ga94bdc8d3b88ac04b9defe663afa48e78" prot="public" static="no" mutable="no">
        <type><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *(*</type>
        <definition>wickr_buffer_t*(* wickr_crypto_engine::wickr_crypto_engine_ecdh_gen_key) (const wickr_ecdh_params_t *params)</definition>
        <argsstring>)(const wickr_ecdh_params_t *params)</argsstring>
        <name>wickr_crypto_engine_ecdh_gen_key</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generate a shared secret given Elliptical Curve Diffie-Hellman parameters and a KDF</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>the parameters to use for the ECDH and KDF algorithms </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a buffer containing the expanded shared secret or NULL if the key exchange cannot be computed </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/crypto_engine.h" line="230" column="1" bodyfile="src/crypto/crypto_engine.h" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__wickr__crypto__engine_1ga782e0e8786ecf8a55c8ae2aea2f178aa" prot="public" static="no" mutable="no">
        <type><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *(*</type>
        <definition>wickr_buffer_t*(* wickr_crypto_engine::wickr_crypto_engine_hmac_create) (const wickr_buffer_t *data, const wickr_buffer_t *hmac_key, wickr_digest_t digest_mode)</definition>
        <argsstring>)(const wickr_buffer_t *data, const wickr_buffer_t *hmac_key, wickr_digest_t digest_mode)</argsstring>
        <name>wickr_crypto_engine_hmac_create</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generate an HMAC</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the data to take the HMAC of </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hmac_key</parametername>
</parameternamelist>
<parameterdescription>
<para>a key to use for HMAC </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>the digest mode to perform HMAC with. This will determine the length of the output </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a buffer containing the HMAC of &apos;data&apos; with &apos;hmac_key&apos; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/crypto_engine.h" line="242" column="1" bodyfile="src/crypto/crypto_engine.h" bodystart="242" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__wickr__crypto__engine_1ga00c52a816403192af5b21d952265d0b6" prot="public" static="no" mutable="no">
        <type>bool(*</type>
        <definition>bool(* wickr_crypto_engine::wickr_crypto_engine_hmac_verify) (const wickr_buffer_t *data, const wickr_buffer_t *hmac_key, const wickr_digest_t mode, const wickr_buffer_t *expected)</definition>
        <argsstring>)(const wickr_buffer_t *data, const wickr_buffer_t *hmac_key, const wickr_digest_t mode, const wickr_buffer_t *expected)</argsstring>
        <name>wickr_crypto_engine_hmac_verify</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Verify an HMAC against an expected result</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the data to calculate the expected HMAC with </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hmac_key</parametername>
</parameternamelist>
<parameterdescription>
<para>the key to use along with &apos;data&apos; to create the expected HMAC with </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>the mode to use for generating the expected HMAC </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expected</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to compare the generated HMAC with </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if &apos;expected&apos; is equal to the HMAC of &apos;data&apos; and &apos;hmac_key&apos; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/crypto_engine.h" line="257" column="1" bodyfile="src/crypto/crypto_engine.h" bodystart="257" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__wickr__crypto__engine_1ga5ab29968c993423df83c9f1a3d7e685d" prot="public" static="no" mutable="no">
        <type><ref refid="structwickr__kdf__result" kindref="compound">wickr_kdf_result_t</ref> *(*</type>
        <definition>wickr_kdf_result_t*(* wickr_crypto_engine::wickr_crypto_kdf_gen) (wickr_kdf_algo_t algo, const wickr_buffer_t *passphrase)</definition>
        <argsstring>)(wickr_kdf_algo_t algo, const wickr_buffer_t *passphrase)</argsstring>
        <name>wickr_crypto_kdf_gen</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Execute a KDF function given an input buffer</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>algo</parametername>
</parameternamelist>
<parameterdescription>
<para>the algorithm info to use for execution of the KDF </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>passphrase</parametername>
</parameternamelist>
<parameterdescription>
<para>bytes to use as input to the KDF function. There are no restrictions for the content of the buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the output of the KDF function, including the generated random salt that was used for the computation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/crypto_engine.h" line="272" column="1" bodyfile="src/crypto/crypto_engine.h" bodystart="272" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__wickr__crypto__engine_1ga640cbc86ca36c4deb2c197de89dce7d1" prot="public" static="no" mutable="no">
        <type><ref refid="structwickr__kdf__result" kindref="compound">wickr_kdf_result_t</ref> *(*</type>
        <definition>wickr_kdf_result_t*(* wickr_crypto_engine::wickr_crypto_kdf_meta) (const wickr_kdf_meta_t *existing_meta, const wickr_buffer_t *passphrase)</definition>
        <argsstring>)(const wickr_kdf_meta_t *existing_meta, const wickr_buffer_t *passphrase)</argsstring>
        <name>wickr_crypto_kdf_meta</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Execute a KDF function given an input buffer and specified parameters</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>existing_meta</parametername>
</parameternamelist>
<parameterdescription>
<para>the parameters to use for execution, including a specific salt </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>passphrase</parametername>
</parameternamelist>
<parameterdescription>
<para>bytes to use as input to the KDF function. There are no restrictions for the content of the buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the output of the KDF function, including the generated random salt that was used for the computation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/crypto_engine.h" line="285" column="1" bodyfile="src/crypto/crypto_engine.h" bodystart="285" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Interface to a set of cryptographic operations used throughout the library. Currently the default implementation of this can be found along with documentation in <ref refid="openssl__suite_8h_source" kindref="compound">openssl_suite.h</ref> and <ref refid="kdf_8h_source" kindref="compound">kdf.h</ref>. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="23">
        <label>wickr_ecdsa_result</label>
        <link refid="structwickr__ecdsa__result"/>
        <childnode refid="17" relation="usage">
          <edgelabel>curve</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>digest_mode</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>sig_data</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>wickr_cipher_key</label>
        <link refid="structwickr__cipher__key"/>
        <childnode refid="15" relation="usage">
          <edgelabel>key_data</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>cipher</edgelabel>
        </childnode>
      </node>
      <node id="22">
        <label>wickr_kdf_algo</label>
        <link refid="structwickr__kdf__algo"/>
      </node>
      <node id="13">
        <label>wickr_crypto_engine</label>
        <link refid="structwickr__crypto__engine"/>
        <childnode refid="14" relation="usage">
          <edgelabel>wickr_crypto_engine_cipher_key_random</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>default_curve</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>wickr_crypto_engine_cipher_encrypt</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>wickr_crypto_engine_hmac_create</edgelabel>
          <edgelabel>wickr_crypto_engine_cipher_decrypt</edgelabel>
          <edgelabel>wickr_crypto_engine_crypto_random</edgelabel>
          <edgelabel>wickr_crypto_engine_digest</edgelabel>
          <edgelabel>wickr_crypto_engine_ecdh_gen_key</edgelabel>
          <edgelabel>wickr_crypto_engine_digest_file</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>default_cipher</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>wickr_crypto_engine_ec_key_import</edgelabel>
          <edgelabel>wickr_crypto_engine_ec_rand_key</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>wickr_crypto_kdf_meta</edgelabel>
          <edgelabel>wickr_crypto_kdf_gen</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>wickr_crypto_engine_ec_sign</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>wickr_cipher</label>
        <link refid="structwickr__cipher"/>
      </node>
      <node id="21">
        <label>wickr_kdf_meta</label>
        <link refid="structwickr__kdf__meta"/>
        <childnode refid="15" relation="usage">
          <edgelabel>salt</edgelabel>
          <edgelabel>info</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>algo</edgelabel>
        </childnode>
      </node>
      <node id="17">
        <label>wickr_ec_curve</label>
        <link refid="structwickr__ec__curve"/>
      </node>
      <node id="24">
        <label>wickr_digest</label>
        <link refid="structwickr__digest"/>
      </node>
      <node id="20">
        <label>wickr_kdf_result</label>
        <link refid="structwickr__kdf__result"/>
        <childnode refid="15" relation="usage">
          <edgelabel>hash</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>meta</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>wickr_cipher_result</label>
        <link refid="structwickr__cipher__result"/>
        <childnode refid="15" relation="usage">
          <edgelabel>cipher_text</edgelabel>
          <edgelabel>iv</edgelabel>
          <edgelabel>auth_tag</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>cipher</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>wickr_buffer</label>
        <link refid="structwickr__buffer"/>
      </node>
      <node id="19">
        <label>wickr_ec_key</label>
        <link refid="structwickr__ec__key"/>
        <childnode refid="17" relation="usage">
          <edgelabel>curve</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>pub_data</edgelabel>
          <edgelabel>pri_data</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/crypto/crypto_engine.h" line="54" column="1" bodyfile="src/crypto/crypto_engine.h" bodystart="54" bodyend="287"/>
    <listofallmembers>
      <member refid="structwickr__crypto__engine_1a307f7d46b55b1e0a93ce9d9489ba8fc5" prot="public" virt="non-virtual"><scope>wickr_crypto_engine</scope><name>default_cipher</name></member>
      <member refid="structwickr__crypto__engine_1a2145e35235dc5c5c944f33ea3d2963bd" prot="public" virt="non-virtual"><scope>wickr_crypto_engine</scope><name>default_curve</name></member>
      <member refid="group__wickr__crypto__engine_1ga459ef821cc40edb5e3c9ce1d571ddc00" prot="public" virt="non-virtual"><scope>wickr_crypto_engine</scope><name>wickr_crypto_engine_cipher_decrypt</name></member>
      <member refid="group__wickr__crypto__engine_1gaf7be0d0ca0d9e7a0c5c3b1ec0fd0918e" prot="public" virt="non-virtual"><scope>wickr_crypto_engine</scope><name>wickr_crypto_engine_cipher_encrypt</name></member>
      <member refid="group__wickr__crypto__engine_1gabc120effc5248a491b18138f9b74b526" prot="public" virt="non-virtual"><scope>wickr_crypto_engine</scope><name>wickr_crypto_engine_cipher_key_random</name></member>
      <member refid="group__wickr__crypto__engine_1gae12855853c05caa473e748a62611d307" prot="public" virt="non-virtual"><scope>wickr_crypto_engine</scope><name>wickr_crypto_engine_crypto_random</name></member>
      <member refid="group__wickr__crypto__engine_1ga361b843efc839e30f90ce24c15b1dd27" prot="public" virt="non-virtual"><scope>wickr_crypto_engine</scope><name>wickr_crypto_engine_decrypt_file</name></member>
      <member refid="group__wickr__crypto__engine_1ga42dfc5b4df166616d962ee4c792ceaf4" prot="public" virt="non-virtual"><scope>wickr_crypto_engine</scope><name>wickr_crypto_engine_digest</name></member>
      <member refid="group__wickr__crypto__engine_1ga298d2dea6722151c11e04458d3924823" prot="public" virt="non-virtual"><scope>wickr_crypto_engine</scope><name>wickr_crypto_engine_digest_file</name></member>
      <member refid="group__wickr__crypto__engine_1ga87a069bbd3cdf509946e4ca0ca008f8f" prot="public" virt="non-virtual"><scope>wickr_crypto_engine</scope><name>wickr_crypto_engine_ec_key_import</name></member>
      <member refid="group__wickr__crypto__engine_1gad16b229b7d16cf00d3983c277ee3b88b" prot="public" virt="non-virtual"><scope>wickr_crypto_engine</scope><name>wickr_crypto_engine_ec_rand_key</name></member>
      <member refid="group__wickr__crypto__engine_1gac5a36d2a53e06a75a2b818e6a5cc96a1" prot="public" virt="non-virtual"><scope>wickr_crypto_engine</scope><name>wickr_crypto_engine_ec_sign</name></member>
      <member refid="group__wickr__crypto__engine_1gae541acc6433f6f5ffe84382ccd5e4f97" prot="public" virt="non-virtual"><scope>wickr_crypto_engine</scope><name>wickr_crypto_engine_ec_verify</name></member>
      <member refid="group__wickr__crypto__engine_1ga94bdc8d3b88ac04b9defe663afa48e78" prot="public" virt="non-virtual"><scope>wickr_crypto_engine</scope><name>wickr_crypto_engine_ecdh_gen_key</name></member>
      <member refid="group__wickr__crypto__engine_1gaa77b1bc373d92d9db9d801bcc4a4d29c" prot="public" virt="non-virtual"><scope>wickr_crypto_engine</scope><name>wickr_crypto_engine_encrypt_file</name></member>
      <member refid="group__wickr__crypto__engine_1ga782e0e8786ecf8a55c8ae2aea2f178aa" prot="public" virt="non-virtual"><scope>wickr_crypto_engine</scope><name>wickr_crypto_engine_hmac_create</name></member>
      <member refid="group__wickr__crypto__engine_1ga00c52a816403192af5b21d952265d0b6" prot="public" virt="non-virtual"><scope>wickr_crypto_engine</scope><name>wickr_crypto_engine_hmac_verify</name></member>
      <member refid="group__wickr__crypto__engine_1ga5ab29968c993423df83c9f1a3d7e685d" prot="public" virt="non-virtual"><scope>wickr_crypto_engine</scope><name>wickr_crypto_kdf_gen</name></member>
      <member refid="group__wickr__crypto__engine_1ga640cbc86ca36c4deb2c197de89dce7d1" prot="public" virt="non-virtual"><scope>wickr_crypto_engine</scope><name>wickr_crypto_kdf_meta</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
