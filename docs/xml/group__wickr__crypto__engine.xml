<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__wickr__crypto__engine" kind="group">
    <compoundname>Wickr_crypto_engine</compoundname>
    <title>Wickr_crypto_engine</title>
    <innerclass refid="structwickr__crypto__engine" prot="public">wickr_crypto_engine</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__wickr__crypto__engine_1gae12855853c05caa473e748a62611d307" prot="public" static="no" mutable="no">
        <type><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *(*</type>
        <definition>wickr_buffer_t*(* wickr_crypto_engine::wickr_crypto_engine_crypto_random) (size_t len)</definition>
        <argsstring>)(size_t len)</argsstring>
        <name>wickr_crypto_engine_crypto_random</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generate secure random bytes</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of bytes to generate </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a buffer containing &apos;len&apos; secure random bytes or NULL if random byte generation fails </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/crypto_engine.h" line="67" column="1" bodyfile="src/crypto/crypto_engine.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__wickr__crypto__engine_1gabc120effc5248a491b18138f9b74b526" prot="public" static="no" mutable="no">
        <type><ref refid="structwickr__cipher__key" kindref="compound">wickr_cipher_key_t</ref> *(*</type>
        <definition>wickr_cipher_key_t*(* wickr_crypto_engine::wickr_crypto_engine_cipher_key_random) (wickr_cipher_t cipher)</definition>
        <argsstring>)(wickr_cipher_t cipher)</argsstring>
        <name>wickr_crypto_engine_cipher_key_random</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generate a secure random cipher key for a particular cipher</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cipher</parametername>
</parameternamelist>
<parameterdescription>
<para>the cipher to generate a random key for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a cipher key containing key material generated by a secure random function or NULL if random byte generation fails </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/crypto_engine.h" line="77" column="1" bodyfile="src/crypto/crypto_engine.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__wickr__crypto__engine_1ga5aacf927a96a30aa63f3fc1bce262caf" prot="public" static="no" mutable="no">
        <type><ref refid="structwickr__cipher__result" kindref="compound">wickr_cipher_result_t</ref> *(*</type>
        <definition>wickr_cipher_result_t*(* wickr_crypto_engine::wickr_crypto_engine_cipher_encrypt) (const wickr_buffer_t *plaintext, const wickr_cipher_key_t *key, const wickr_buffer_t *iv)</definition>
        <argsstring>)(const wickr_buffer_t *plaintext, const wickr_cipher_key_t *key, const wickr_buffer_t *iv)</argsstring>
        <name>wickr_crypto_engine_cipher_encrypt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Encrypt a buffer</para><para>NOTE: IV is randomly chosen using a secure random function if one is not provided</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plaintext</parametername>
</parameternamelist>
<parameterdescription>
<para>the content to encrypt using &apos;key&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>the cipher key to use to encrypt &apos;plaintext&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iv</parametername>
</parameternamelist>
<parameterdescription>
<para>an initialization vector to use with the cipher mode, or NULL if one should be chosen at random </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a cipher result containing encrypted bytes, or NULL if the cipher mode fails or is not supported </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/crypto_engine.h" line="91" column="1" bodyfile="src/crypto/crypto_engine.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__wickr__crypto__engine_1ga81cff182bb87f963996b75891e242ed4" prot="public" static="no" mutable="no">
        <type><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *(*</type>
        <definition>wickr_buffer_t*(* wickr_crypto_engine::wickr_crypto_engine_cipher_decrypt) (const wickr_cipher_result_t *cipher_result, const wickr_cipher_key_t *key, bool only_auth_ciphers)</definition>
        <argsstring>)(const wickr_cipher_result_t *cipher_result, const wickr_cipher_key_t *key, bool only_auth_ciphers)</argsstring>
        <name>wickr_crypto_engine_cipher_decrypt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Decrypt a cipher_result</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cipher_result</parametername>
</parameternamelist>
<parameterdescription>
<para>a cipher result generated from &apos;wickr_crypto_engine_cipher_encrypt&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>the key to use to attempt to decrypt &apos;cipher_result&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>only_auth_ciphers</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, only authenticated ciphers may be used for decryption </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a buffer containing decrypted bytes. If the AES mode is authenticated, NULL will be returned if key is incorrect. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/crypto_engine.h" line="105" column="1" bodyfile="src/crypto/crypto_engine.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__wickr__crypto__engine_1gaa77b1bc373d92d9db9d801bcc4a4d29c" prot="public" static="no" mutable="no">
        <type>bool(*</type>
        <definition>bool(* wickr_crypto_engine::wickr_crypto_engine_encrypt_file) (const wickr_cipher_key_t *key, const char *sourceFilePath, const char *destinationFilePath)</definition>
        <argsstring>)(const wickr_cipher_key_t *key, const char *sourceFilePath, const char *destinationFilePath)</argsstring>
        <name>wickr_crypto_engine_encrypt_file</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Encrypt a file</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in_file</parametername>
</parameternamelist>
<parameterdescription>
<para>the file to encrypt </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>the key to use for encryption </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_file</parametername>
</parameternamelist>
<parameterdescription>
<para>a file that should contain the encrypted data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if encryption succeeds, and &apos;out_file&apos; can be written </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/crypto_engine.h" line="119" column="1" bodyfile="src/crypto/crypto_engine.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__wickr__crypto__engine_1ga361b843efc839e30f90ce24c15b1dd27" prot="public" static="no" mutable="no">
        <type>bool(*</type>
        <definition>bool(* wickr_crypto_engine::wickr_crypto_engine_decrypt_file) (const wickr_cipher_key_t *key, const char *sourceFilePath, const char *destinationFilePath, bool only_auth_ciphers)</definition>
        <argsstring>)(const wickr_cipher_key_t *key, const char *sourceFilePath, const char *destinationFilePath, bool only_auth_ciphers)</argsstring>
        <name>wickr_crypto_engine_decrypt_file</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Decrypt a file</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in_file</parametername>
</parameternamelist>
<parameterdescription>
<para>the encrypted file to decrypt </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>the key to use for decryption </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_file</parametername>
</parameternamelist>
<parameterdescription>
<para>the file to write the decrypted data from &apos;in_file&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>only_auth_ciphers</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, only authenticated ciphers may be used for decryption </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the decryption operation succeeds, and &apos;out_file&apos; can be written </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/crypto_engine.h" line="135" column="1" bodyfile="src/crypto/crypto_engine.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__wickr__crypto__engine_1ga42dfc5b4df166616d962ee4c792ceaf4" prot="public" static="no" mutable="no">
        <type><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *(*</type>
        <definition>wickr_buffer_t*(* wickr_crypto_engine::wickr_crypto_engine_digest) (const wickr_buffer_t *buffer, const wickr_buffer_t *salt, wickr_digest_t digest_mode)</definition>
        <argsstring>)(const wickr_buffer_t *buffer, const wickr_buffer_t *salt, wickr_digest_t digest_mode)</argsstring>
        <name>wickr_crypto_engine_digest</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate a hash of a buffer using an optional salt value</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer to hash </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>salt</parametername>
</parameternamelist>
<parameterdescription>
<para>a salt value mix with buffer before taking the hash Passing NULL will allow for no salt to be used </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>the mode of the hash </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a buffer containing the derived hash or NULL if the hashing operation fails </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/crypto_engine.h" line="151" column="1" bodyfile="src/crypto/crypto_engine.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__wickr__crypto__engine_1ga298d2dea6722151c11e04458d3924823" prot="public" static="no" mutable="no">
        <type><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *(*</type>
        <definition>wickr_buffer_t*(* wickr_crypto_engine::wickr_crypto_engine_digest_file) (FILE *in_file, const wickr_digest_t mode)</definition>
        <argsstring>)(FILE *in_file, const wickr_digest_t mode)</argsstring>
        <name>wickr_crypto_engine_digest_file</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the hash of a file</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in_file</parametername>
</parameternamelist>
<parameterdescription>
<para>a file to take the hash of it&apos;s contents </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>the mode to use for calculating the hash </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a buffer containing the output of the chosen mode of the contents of in_file </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/crypto_engine.h" line="164" column="1" bodyfile="src/crypto/crypto_engine.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__wickr__crypto__engine_1gad16b229b7d16cf00d3983c277ee3b88b" prot="public" static="no" mutable="no">
        <type><ref refid="structwickr__ec__key" kindref="compound">wickr_ec_key_t</ref> *(*</type>
        <definition>wickr_ec_key_t*(* wickr_crypto_engine::wickr_crypto_engine_ec_rand_key) (wickr_ec_curve_t curve)</definition>
        <argsstring>)(wickr_ec_curve_t curve)</argsstring>
        <name>wickr_crypto_engine_ec_rand_key</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generate a random Elliptical Curve keypair</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>curve</parametername>
</parameternamelist>
<parameterdescription>
<para>the curve parameters to use for random key pair generation </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a random Elliptical Curve key pair or NULL if the random generation fails </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/crypto_engine.h" line="175" column="1" bodyfile="src/crypto/crypto_engine.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__wickr__crypto__engine_1ga87a069bbd3cdf509946e4ca0ca008f8f" prot="public" static="no" mutable="no">
        <type><ref refid="structwickr__ec__key" kindref="compound">wickr_ec_key_t</ref> *(*</type>
        <definition>wickr_ec_key_t*(* wickr_crypto_engine::wickr_crypto_engine_ec_key_import) (const wickr_buffer_t *buffer, bool is_private)</definition>
        <argsstring>)(const wickr_buffer_t *buffer, bool is_private)</argsstring>
        <name>wickr_crypto_engine_ec_key_import</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Import an Elliptical Curve key from a buffer</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer representing Elliptical Curve key material </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_private</parametername>
</parameternamelist>
<parameterdescription>
<para>false if the buffer represents a public key </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an Elliptical Curve key pair parsed from buffer or NULL if buffer does not contain a valid key, or is_private is incorrectly set </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/crypto_engine.h" line="186" column="1" bodyfile="src/crypto/crypto_engine.h" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__wickr__crypto__engine_1gac5a36d2a53e06a75a2b818e6a5cc96a1" prot="public" static="no" mutable="no">
        <type><ref refid="structwickr__ecdsa__result" kindref="compound">wickr_ecdsa_result_t</ref> *(*</type>
        <definition>wickr_ecdsa_result_t*(* wickr_crypto_engine::wickr_crypto_engine_ec_sign) (const wickr_ec_key_t *ec_signing_key, const wickr_buffer_t *data_to_sign, const wickr_digest_t digest_mode)</definition>
        <argsstring>)(const wickr_ec_key_t *ec_signing_key, const wickr_buffer_t *data_to_sign, const wickr_digest_t digest_mode)</argsstring>
        <name>wickr_crypto_engine_ec_sign</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sign data using an Elliptical Curve key Data is hashed before signing. This function will calculate ECDSA(SHA2(data_to_sign))</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ec_signing_key</parametername>
</parameternamelist>
<parameterdescription>
<para>private signing key to use for the ECDSA algorithm </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_to_sign</parametername>
</parameternamelist>
<parameterdescription>
<para>the data to hash with &apos;digest_mode&apos;, and then sign with &apos;ec_signing_key&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>digest_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>the digest mode to use for SHA2 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an ecdsa result containing the output of ECDSA(SHA2(data_to_sign)) or NULL if the &apos;ec_signing_key&apos; is not a private key </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/crypto_engine.h" line="200" column="1" bodyfile="src/crypto/crypto_engine.h" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__wickr__crypto__engine_1gae541acc6433f6f5ffe84382ccd5e4f97" prot="public" static="no" mutable="no">
        <type>bool(*</type>
        <definition>bool(* wickr_crypto_engine::wickr_crypto_engine_ec_verify) (const wickr_ecdsa_result_t *signature, const wickr_ec_key_t *ec_public_key, const wickr_buffer_t *data_to_verify)</definition>
        <argsstring>)(const wickr_ecdsa_result_t *signature, const wickr_ec_key_t *ec_public_key, const wickr_buffer_t *data_to_verify)</argsstring>
        <name>wickr_crypto_engine_ec_verify</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Verify ECDSA signatures</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>signature</parametername>
</parameternamelist>
<parameterdescription>
<para>a signature produced with &apos;wickr_crypto_engine_ec_sign&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ec_public_key</parametername>
</parameternamelist>
<parameterdescription>
<para>the public signing key to use for verification </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_to_verify</parametername>
</parameternamelist>
<parameterdescription>
<para>the original data that should have been signed with &apos;ec_public_key&apos;. It will be hashed inside this function as part of the verification process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if &apos;signature&apos; can be verified by &apos;ec_public_key&apos; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/crypto_engine.h" line="214" column="1" bodyfile="src/crypto/crypto_engine.h" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__wickr__crypto__engine_1ga94bdc8d3b88ac04b9defe663afa48e78" prot="public" static="no" mutable="no">
        <type><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *(*</type>
        <definition>wickr_buffer_t*(* wickr_crypto_engine::wickr_crypto_engine_ecdh_gen_key) (const wickr_ecdh_params_t *params)</definition>
        <argsstring>)(const wickr_ecdh_params_t *params)</argsstring>
        <name>wickr_crypto_engine_ecdh_gen_key</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generate a shared secret given Elliptical Curve Diffie-Hellman parameters and a KDF</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>the parameters to use for the ECDH and KDF algorithms </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a buffer containing the expanded shared secret or NULL if the key exchange cannot be computed </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/crypto_engine.h" line="226" column="1" bodyfile="src/crypto/crypto_engine.h" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__wickr__crypto__engine_1ga782e0e8786ecf8a55c8ae2aea2f178aa" prot="public" static="no" mutable="no">
        <type><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *(*</type>
        <definition>wickr_buffer_t*(* wickr_crypto_engine::wickr_crypto_engine_hmac_create) (const wickr_buffer_t *data, const wickr_buffer_t *hmac_key, wickr_digest_t digest_mode)</definition>
        <argsstring>)(const wickr_buffer_t *data, const wickr_buffer_t *hmac_key, wickr_digest_t digest_mode)</argsstring>
        <name>wickr_crypto_engine_hmac_create</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generate an HMAC</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the data to take the HMAC of </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hmac_key</parametername>
</parameternamelist>
<parameterdescription>
<para>a key to use for HMAC </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>the digest mode to perform HMAC with. This will determine the length of the output </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a buffer containing the HMAC of &apos;data&apos; with &apos;hmac_key&apos; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/crypto_engine.h" line="238" column="1" bodyfile="src/crypto/crypto_engine.h" bodystart="238" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__wickr__crypto__engine_1ga00c52a816403192af5b21d952265d0b6" prot="public" static="no" mutable="no">
        <type>bool(*</type>
        <definition>bool(* wickr_crypto_engine::wickr_crypto_engine_hmac_verify) (const wickr_buffer_t *data, const wickr_buffer_t *hmac_key, const wickr_digest_t mode, const wickr_buffer_t *expected)</definition>
        <argsstring>)(const wickr_buffer_t *data, const wickr_buffer_t *hmac_key, const wickr_digest_t mode, const wickr_buffer_t *expected)</argsstring>
        <name>wickr_crypto_engine_hmac_verify</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Verify an HMAC against an expected result</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the data to calculate the expected HMAC with </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hmac_key</parametername>
</parameternamelist>
<parameterdescription>
<para>the key to use along with &apos;data&apos; to create the expected HMAC with </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>the mode to use for generating the expected HMAC </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expected</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to compare the generated HMAC with </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if &apos;expected&apos; is equal to the HMAC of &apos;data&apos; and &apos;hmac_key&apos; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/crypto_engine.h" line="253" column="1" bodyfile="src/crypto/crypto_engine.h" bodystart="253" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__wickr__crypto__engine_1ga5ab29968c993423df83c9f1a3d7e685d" prot="public" static="no" mutable="no">
        <type><ref refid="structwickr__kdf__result" kindref="compound">wickr_kdf_result_t</ref> *(*</type>
        <definition>wickr_kdf_result_t*(* wickr_crypto_engine::wickr_crypto_kdf_gen) (wickr_kdf_algo_t algo, const wickr_buffer_t *passphrase)</definition>
        <argsstring>)(wickr_kdf_algo_t algo, const wickr_buffer_t *passphrase)</argsstring>
        <name>wickr_crypto_kdf_gen</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Execute a KDF function given an input buffer</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>algo</parametername>
</parameternamelist>
<parameterdescription>
<para>the algorithm info to use for execution of the KDF </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>passphrase</parametername>
</parameternamelist>
<parameterdescription>
<para>bytes to use as input to the KDF function. There are no restrictions for the content of the buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the output of the KDF function, including the generated random salt that was used for the computation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/crypto_engine.h" line="268" column="1" bodyfile="src/crypto/crypto_engine.h" bodystart="268" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__wickr__crypto__engine_1ga640cbc86ca36c4deb2c197de89dce7d1" prot="public" static="no" mutable="no">
        <type><ref refid="structwickr__kdf__result" kindref="compound">wickr_kdf_result_t</ref> *(*</type>
        <definition>wickr_kdf_result_t*(* wickr_crypto_engine::wickr_crypto_kdf_meta) (const wickr_kdf_meta_t *existing_meta, const wickr_buffer_t *passphrase)</definition>
        <argsstring>)(const wickr_kdf_meta_t *existing_meta, const wickr_buffer_t *passphrase)</argsstring>
        <name>wickr_crypto_kdf_meta</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Execute a KDF function given an input buffer and specified parameters</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>existing_meta</parametername>
</parameternamelist>
<parameterdescription>
<para>the parameters to use for execution, including a specific salt </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>passphrase</parametername>
</parameternamelist>
<parameterdescription>
<para>bytes to use as input to the KDF function. There are no restrictions for the content of the buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the output of the KDF function, including the generated random salt that was used for the computation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/crypto_engine.h" line="281" column="1" bodyfile="src/crypto/crypto_engine.h" bodystart="281" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__wickr__crypto__engine_1ga74d5cea6c7d1d6e67b1be476fbaf6235" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structwickr__crypto__engine" kindref="compound">wickr_crypto_engine_t</ref></type>
        <definition>const wickr_crypto_engine_t wickr_crypto_engine_get_default</definition>
        <argsstring>()</argsstring>
        <name>wickr_crypto_engine_get_default</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Wickr default crypto engine</para><para><simplesect kind="return"><para>an engine containing default crypto primitive implementations (currently implemented with OpenSSL 1.0.2, libscrypt, libbcrypt) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/crypto_engine.h" line="294" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__crypto__engine_1ga5709d94cd09ef0fb47d1a5f59232f115" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
        <definition>wickr_buffer_t* wickr_crypto_engine_kdf_cipher</definition>
        <argsstring>(const wickr_crypto_engine_t *engine, wickr_kdf_algo_t algo, wickr_cipher_t cipher, const wickr_buffer_t *value, const wickr_buffer_t *passphrase)</argsstring>
        <name>wickr_crypto_engine_kdf_cipher</name>
        <param>
          <type>const <ref refid="structwickr__crypto__engine" kindref="compound">wickr_crypto_engine_t</ref> *</type>
          <declname>engine</declname>
        </param>
        <param>
          <type><ref refid="structwickr__kdf__algo" kindref="compound">wickr_kdf_algo_t</ref></type>
          <declname>algo</declname>
        </param>
        <param>
          <type><ref refid="structwickr__cipher" kindref="compound">wickr_cipher_t</ref></type>
          <declname>cipher</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
          <declname>passphrase</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Encrypt a buffer with a KDF + CIPHER</para><para>The KDF + CIPHER functions currently acts as follows:</para><para><orderedlist>
<listitem><para>Calculate KDF(randomSalt || passphrase)</para></listitem><listitem><para>Use the output of step 1. as a cipher key to encrypt the buffer &apos;value&apos; with the default engine cipher</para></listitem><listitem><para>The output of step 2 is then packed as | KDF_ID | RANDOM_SALT | CIPHER_TEXT |</para></listitem></orderedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>engine</parametername>
</parameternamelist>
<parameterdescription>
<para>the engine to use for ciphering / kdf functions </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>algo</parametername>
</parameternamelist>
<parameterdescription>
<para>the kdf algorithm to use for key derivation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipher</parametername>
</parameternamelist>
<parameterdescription>
<para>the cipher to use to encrypt &apos;value&apos; with the output of the KDF function with &apos;passphrase&apos; as input </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to protect with the KDF cipher </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>passphrase</parametername>
</parameternamelist>
<parameterdescription>
<para>the KDF input to use for getting a cipher key </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a buffer serialized in the following format: </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/crypto_engine.h" line="315" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__crypto__engine_1gab60480270e80ba34aa44385633037983" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
        <definition>wickr_buffer_t* wickr_crypto_engine_kdf_decipher</definition>
        <argsstring>(const wickr_crypto_engine_t *engine, const wickr_buffer_t *input_buffer, const wickr_buffer_t *passphrase)</argsstring>
        <name>wickr_crypto_engine_kdf_decipher</name>
        <param>
          <type>const <ref refid="structwickr__crypto__engine" kindref="compound">wickr_crypto_engine_t</ref> *</type>
          <declname>engine</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
          <declname>input_buffer</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
          <declname>passphrase</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>engine</parametername>
</parameternamelist>
<parameterdescription>
<para>the engine to use for deciphering / kdf functions </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>the output of a kdf + cipher operation with &apos;wickr_crypto_engine_kdf_cipher&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>passphrase</parametername>
</parameternamelist>
<parameterdescription>
<para>the passphrase for the kdf + cipher operation </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the original buffer protected by &apos;wickr_crypto_engine_kdf_cipher&apos; or NULL if the KDF + cipher function fails due to an incorrect passphrase </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/crypto_engine.h" line="325" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__crypto__engine_1ga18c21501a41c97f2ba79a9366343cdcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__digest" kindref="compound">wickr_digest_t</ref></type>
        <definition>wickr_digest_t wickr_digest_matching_cipher</definition>
        <argsstring>(wickr_cipher_t cipher)</argsstring>
        <name>wickr_digest_matching_cipher</name>
        <param>
          <type><ref refid="structwickr__cipher" kindref="compound">wickr_cipher_t</ref></type>
          <declname>cipher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the matching digest type for a function based on size</para><para>DEPRECATED IN FAVOR OF wickr_exchange_kdf_matching_cipher</para><para>NOTE: Currently only 256bit AES ciphers are supported, so this function always returns SHA_256</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cipher</parametername>
</parameternamelist>
<parameterdescription>
<para>the cipher to find the matching digest for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a digest that has an output which is the same size as the length of the cipher&apos;s key </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/crypto_engine.h" line="340" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__crypto__engine_1ga6cdd263ddccd0b28a85ed61889805e60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__kdf__algo" kindref="compound">wickr_kdf_algo_t</ref></type>
        <definition>wickr_kdf_algo_t wickr_key_exchange_kdf_matching_cipher</definition>
        <argsstring>(wickr_cipher_t cipher)</argsstring>
        <name>wickr_key_exchange_kdf_matching_cipher</name>
        <param>
          <type><ref refid="structwickr__cipher" kindref="compound">wickr_cipher_t</ref></type>
          <declname>cipher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the matching message key exchange kdf for a cipher</para><para>NOTE: Currently all ciphers return HKDF with SHA512 as a digest</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cipher</parametername>
</parameternamelist>
<parameterdescription>
<para>the cipher to find the matching kdf for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a kdf that has an output which is the same size as the length of the cipher&apos;s key </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/crypto_engine.h" line="353" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__crypto__engine_1ga0a708e5e46c40eae5eaeb581f6a1aed2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__digest" kindref="compound">wickr_digest_t</ref></type>
        <definition>wickr_digest_t wickr_digest_matching_curve</definition>
        <argsstring>(wickr_ec_curve_t curve)</argsstring>
        <name>wickr_digest_matching_curve</name>
        <param>
          <type><ref refid="structwickr__ec__curve" kindref="compound">wickr_ec_curve_t</ref></type>
          <declname>curve</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the matching digest for a curve, this is to be used for signature operations using this curve</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>curve</parametername>
</parameternamelist>
<parameterdescription>
<para>a curve to get the matching digest for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the digest to use for signature operations using &apos;curve&apos; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/crypto_engine.h" line="363" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__crypto__engine_1gaf44e3be9066727bf83034d3593dc74e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__cipher" kindref="compound">wickr_cipher_t</ref></type>
        <definition>wickr_cipher_t wickr_exchange_cipher_matching_cipher</definition>
        <argsstring>(wickr_cipher_t cipher)</argsstring>
        <name>wickr_exchange_cipher_matching_cipher</name>
        <param>
          <type><ref refid="structwickr__cipher" kindref="compound">wickr_cipher_t</ref></type>
          <declname>cipher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the matching exchange cipher given a message packet cipher</para><para>An exchange cipher is used for wrapping / unwrapping packet content decryption key material (see wickr_key_exchange_create_from_components) This function currently always returns CIPHER_ID_AES256_CTR The lack of authentication on this layer is a performance / space optimization, since it is ultimately protecting authenticated mode key material (currently always CIPHER_ID_AES256_GCM) to be used for packet content decryption If bits are flipped in the key exchange itself, the resulting unauthenticated output will not be able to decrypt the GCM mode packet content</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cipher</parametername>
</parameternamelist>
<parameterdescription>
<para>the cipher being used for packet content encryption / decryption </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the exchange cipher matching &apos;cipher&apos; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/crypto_engine.h" line="378" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
