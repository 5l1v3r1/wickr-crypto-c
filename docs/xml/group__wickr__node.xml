<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__wickr__node" kind="group">
    <compoundname>wickr_node</compoundname>
    <title>wickr_node_t</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__wickr__node_1ga293b1210648e2db5449be23fe0f3e644" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__node" kindref="compound">wickr_node_t</ref> *</type>
        <definition>wickr_node_t* wickr_node_create</definition>
        <argsstring>(wickr_buffer_t *dev_id, wickr_identity_chain_t *id_chain, wickr_ephemeral_keypair_t *ephemeral_keypair)</argsstring>
        <name>wickr_node_create</name>
        <param>
          <type><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
          <declname>dev_id</declname>
        </param>
        <param>
          <type><ref refid="structwickr__identity__chain" kindref="compound">wickr_identity_chain_t</ref> *</type>
          <declname>id_chain</declname>
        </param>
        <param>
          <type><ref refid="structwickr__ephemeral__keypair" kindref="compound">wickr_ephemeral_keypair_t</ref> *</type>
          <declname>ephemeral_keypair</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a node from components</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev_id</parametername>
</parameternamelist>
<parameterdescription>
<para>see &apos;<ref refid="structwickr__node" kindref="compound">wickr_node</ref>&apos; property documentation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id_chain</parametername>
</parameternamelist>
<parameterdescription>
<para>see &apos;<ref refid="structwickr__node" kindref="compound">wickr_node</ref>&apos; property documentation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ephemeral_keypair</parametername>
</parameternamelist>
<parameterdescription>
<para>see &apos;<ref refid="structwickr__node" kindref="compound">wickr_node</ref>&apos; property documentation </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a newly allocated node. Takes ownership of the passed inputs </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/node.h" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__node_1ga2ed650b947df7316cf0f915805ac5aa4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wickr_node_rotate_keypair</definition>
        <argsstring>(wickr_node_t *node, wickr_ephemeral_keypair_t *new_keypair, bool copy)</argsstring>
        <name>wickr_node_rotate_keypair</name>
        <param>
          <type><ref refid="structwickr__node" kindref="compound">wickr_node_t</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="structwickr__ephemeral__keypair" kindref="compound">wickr_ephemeral_keypair_t</ref> *</type>
          <declname>new_keypair</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>copy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Rotate in a new ephemeral key pair for message sending</para><para>NOTE: This function DOES NOT ensure that new_keypair is signed properly. To do that, you must call &apos;wickr_node_verify_signature_chain&apos; after rotation</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>the node to rotate &apos;new_keypair&apos; into </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_keypair</parametername>
</parameternamelist>
<parameterdescription>
<para>the key pair to rotate into place </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>copy</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, perform a deep copy of &apos;new_keypair&apos; before rotating </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the rotation succeeds, false if the copy fails </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/node.h" line="98" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__node_1ga393c4fb42022fdc6f4336a62dbc7af91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__node" kindref="compound">wickr_node_t</ref> *</type>
        <definition>wickr_node_t* wickr_node_copy</definition>
        <argsstring>(const wickr_node_t *source)</argsstring>
        <name>wickr_node_copy</name>
        <param>
          <type>const <ref refid="structwickr__node" kindref="compound">wickr_node_t</ref> *</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy an node</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>the node to copy </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a newly allocated node holding a deep copy of the properties of &apos;source&apos; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/node.h" line="109" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__node_1ga6acf07885403d9df6baad36a8d797f73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wickr_node_destroy</definition>
        <argsstring>(wickr_node_t **node)</argsstring>
        <name>wickr_node_destroy</name>
        <param>
          <type><ref refid="structwickr__node" kindref="compound">wickr_node_t</ref> **</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy a node</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to the node to destroy. All properties of &apos;*node&apos; will also be destroyed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/node.h" line="119" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__node_1gac9e2d96e9109590124b2fd05a8826c1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wickr_node_verify_signature_chain</definition>
        <argsstring>(wickr_node_t *node, const wickr_crypto_engine_t *engine)</argsstring>
        <name>wickr_node_verify_signature_chain</name>
        <param>
          <type><ref refid="structwickr__node" kindref="compound">wickr_node_t</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__crypto__engine" kindref="compound">wickr_crypto_engine_t</ref> *</type>
          <declname>engine</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Verify the integrity of the signature chain for a node</para><para>In order to be valid, the ephemeral keypair&apos;s signature must validate with the id_chain&apos;s &apos;node&apos; public signing key. The id_chain&apos;s &apos;node&apos; signature must validate with the id_chain&apos;s &apos;root&apos; public signing key</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>the node to verify </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>engine</parametername>
</parameternamelist>
<parameterdescription>
<para>a crypto engine capable of verifying EC signatures </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the chain validates, false if there are any signature validation failures </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/node.h" line="134" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__node_1ga504ebe707aa003032c4ac8044d73ee92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wickr_node_array_t *</type>
        <definition>wickr_node_array_t* wickr_node_array_new</definition>
        <argsstring>(uint32_t node_count)</argsstring>
        <name>wickr_node_array_new</name>
        <param>
          <type>uint32_t</type>
          <declname>node_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an array of nodes</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_count</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of nodes the array should hold </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a newly allocated array with enough space to hold &apos;node_count&apos; nodes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/node.h" line="145" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__node_1gae511a75489982fc2e90271be63d9d753" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wickr_node_array_set_item</definition>
        <argsstring>(wickr_array_t *array, uint32_t index, wickr_node_t *node)</argsstring>
        <name>wickr_node_array_set_item</name>
        <param>
          <type>wickr_array_t *</type>
          <declname>array</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="structwickr__node" kindref="compound">wickr_node_t</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set an item in the node array</para><para>NOTE: &apos;node&apos; is not copied into the array, ownership is simply transferred to the array</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>the array to set a node into </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index to place the node into the array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>the node to place at &apos;index&apos; in the array </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the insert succeeds, false if the index is out of range </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/node.h" line="160" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__node_1ga878a3015abc8563d512c0e5acf10df60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__node" kindref="compound">wickr_node_t</ref> *</type>
        <definition>wickr_node_t* wickr_node_array_fetch_item</definition>
        <argsstring>(const wickr_array_t *array, uint32_t index)</argsstring>
        <name>wickr_node_array_fetch_item</name>
        <param>
          <type>const wickr_array_t *</type>
          <declname>array</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fetch an item in the node array</para><para>NOTE: a fetched node is not copied out of the array, it is still owned by the array</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>the array to fetch from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index in the array to fetch from </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the node at &apos;index&apos;. NULL if the index is out of bounds </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/node.h" line="174" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__node_1gab577103b1752357b8575b064e22a4970" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wickr_node_array_t *</type>
        <definition>wickr_node_array_t* wickr_node_array_copy</definition>
        <argsstring>(const wickr_node_array_t *array)</argsstring>
        <name>wickr_node_array_copy</name>
        <param>
          <type>const wickr_node_array_t *</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Make a deep copy of a node array</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>the array to copy </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a newly allocated wickr_node_array that contains a copy of each element from &apos;array&apos; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/node.h" line="185" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__node_1gab3f40f122baca50bcc62af54eaa08fe9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wickr_node_array_destroy</definition>
        <argsstring>(wickr_node_array_t **array)</argsstring>
        <name>wickr_node_array_destroy</name>
        <param>
          <type>wickr_node_array_t **</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy a node array</para><para>NOTE: Nodes in the array are not destroyed, only the container array</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>the array to destroy </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/node.h" line="197" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
