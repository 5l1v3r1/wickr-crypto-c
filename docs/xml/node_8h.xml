<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="node_8h" kind="file" language="C++">
    <compoundname>node.h</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes refid="buffer_8h" local="yes">buffer.h</includes>
    <includes refid="ecdsa_8h" local="yes">ecdsa.h</includes>
    <includes refid="eckey_8h" local="yes">eckey.h</includes>
    <includes refid="devinfo_8h" local="yes">devinfo.h</includes>
    <includes refid="crypto__engine_8h" local="yes">crypto_engine.h</includes>
    <includes refid="root__keys_8h" local="yes">root_keys.h</includes>
    <includes refid="identity_8h" local="yes">identity.h</includes>
    <includes refid="ephemeral__keypair_8h" local="yes">ephemeral_keypair.h</includes>
    <includes refid="array_8h" local="yes">array.h</includes>
    <includedby refid="protocol_8h" local="yes">src/crypto/protocol.h</includedby>
    <includedby refid="wickr-crypto-c_8h" local="yes">src/crypto/wickr-crypto-c.h</includedby>
    <incdepgraph>
      <node id="324">
        <label>ephemeral_keypair.h</label>
        <link refid="ephemeral__keypair_8h_source"/>
        <childnode refid="306" relation="include">
        </childnode>
        <childnode refid="312" relation="include">
        </childnode>
        <childnode refid="313" relation="include">
        </childnode>
        <childnode refid="316" relation="include">
        </childnode>
        <childnode refid="323" relation="include">
        </childnode>
      </node>
      <node id="308">
        <label>stdbool.h</label>
      </node>
      <node id="321">
        <label>root_keys.h</label>
        <link refid="root__keys_8h_source"/>
        <childnode refid="306" relation="include">
        </childnode>
        <childnode refid="307" relation="include">
        </childnode>
        <childnode refid="313" relation="include">
        </childnode>
        <childnode refid="316" relation="include">
        </childnode>
        <childnode refid="322" relation="include">
        </childnode>
        <childnode refid="315" relation="include">
        </childnode>
      </node>
      <node id="309">
        <label>stdint.h</label>
      </node>
      <node id="306">
        <label>stdlib.h</label>
      </node>
      <node id="316">
        <label>crypto_engine.h</label>
        <link refid="crypto__engine_8h_source"/>
        <childnode refid="307" relation="include">
        </childnode>
        <childnode refid="317" relation="include">
        </childnode>
        <childnode refid="314" relation="include">
        </childnode>
        <childnode refid="313" relation="include">
        </childnode>
        <childnode refid="312" relation="include">
        </childnode>
        <childnode refid="319" relation="include">
        </childnode>
        <childnode refid="318" relation="include">
        </childnode>
        <childnode refid="306" relation="include">
        </childnode>
        <childnode refid="320" relation="include">
        </childnode>
      </node>
      <node id="322">
        <label>storage.h</label>
        <link refid="storage_8h_source"/>
        <childnode refid="306" relation="include">
        </childnode>
        <childnode refid="307" relation="include">
        </childnode>
        <childnode refid="316" relation="include">
        </childnode>
      </node>
      <node id="311">
        <label>limits.h</label>
      </node>
      <node id="319">
        <label>ecdh.h</label>
        <link refid="ecdh_8h_source"/>
        <childnode refid="306" relation="include">
        </childnode>
        <childnode refid="313" relation="include">
        </childnode>
        <childnode refid="314" relation="include">
        </childnode>
        <childnode refid="318" relation="include">
        </childnode>
      </node>
      <node id="318">
        <label>kdf.h</label>
        <link refid="kdf_8h_source"/>
        <childnode refid="307" relation="include">
        </childnode>
        <childnode refid="314" relation="include">
        </childnode>
      </node>
      <node id="310">
        <label>array.h</label>
        <link refid="array_8h_source"/>
        <childnode refid="306" relation="include">
        </childnode>
        <childnode refid="307" relation="include">
        </childnode>
      </node>
      <node id="305">
        <label>src/crypto/node.h</label>
        <link refid="node_8h"/>
        <childnode refid="306" relation="include">
        </childnode>
        <childnode refid="307" relation="include">
        </childnode>
        <childnode refid="312" relation="include">
        </childnode>
        <childnode refid="313" relation="include">
        </childnode>
        <childnode refid="315" relation="include">
        </childnode>
        <childnode refid="316" relation="include">
        </childnode>
        <childnode refid="321" relation="include">
        </childnode>
        <childnode refid="323" relation="include">
        </childnode>
        <childnode refid="324" relation="include">
        </childnode>
        <childnode refid="310" relation="include">
        </childnode>
      </node>
      <node id="314">
        <label>digest.h</label>
        <link refid="digest_8h_source"/>
        <childnode refid="306" relation="include">
        </childnode>
        <childnode refid="309" relation="include">
        </childnode>
      </node>
      <node id="307">
        <label>buffer.h</label>
        <link refid="buffer_8h_source"/>
        <childnode refid="306" relation="include">
        </childnode>
        <childnode refid="308" relation="include">
        </childnode>
        <childnode refid="309" relation="include">
        </childnode>
        <childnode refid="310" relation="include">
        </childnode>
        <childnode refid="311" relation="include">
        </childnode>
      </node>
      <node id="317">
        <label>cipher.h</label>
        <link refid="cipher_8h_source"/>
        <childnode refid="306" relation="include">
        </childnode>
        <childnode refid="307" relation="include">
        </childnode>
        <childnode refid="318" relation="include">
        </childnode>
      </node>
      <node id="315">
        <label>devinfo.h</label>
        <link refid="devinfo_8h_source"/>
        <childnode refid="306" relation="include">
        </childnode>
        <childnode refid="307" relation="include">
        </childnode>
        <childnode refid="316" relation="include">
        </childnode>
      </node>
      <node id="323">
        <label>identity.h</label>
        <link refid="identity_8h_source"/>
        <childnode refid="306" relation="include">
        </childnode>
        <childnode refid="307" relation="include">
        </childnode>
        <childnode refid="313" relation="include">
        </childnode>
        <childnode refid="312" relation="include">
        </childnode>
        <childnode refid="316" relation="include">
        </childnode>
        <childnode refid="321" relation="include">
        </childnode>
      </node>
      <node id="320">
        <label>stdio.h</label>
      </node>
      <node id="312">
        <label>ecdsa.h</label>
        <link refid="ecdsa_8h_source"/>
        <childnode refid="306" relation="include">
        </childnode>
        <childnode refid="313" relation="include">
        </childnode>
        <childnode refid="314" relation="include">
        </childnode>
      </node>
      <node id="313">
        <label>eckey.h</label>
        <link refid="eckey_8h_source"/>
        <childnode refid="306" relation="include">
        </childnode>
        <childnode refid="307" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="328">
        <label>src/crypto/wickr_ctx.h</label>
        <link refid="wickr__ctx_8h_source"/>
        <childnode refid="327" relation="include">
        </childnode>
      </node>
      <node id="327">
        <label>src/crypto/wickr-crypto-c.h</label>
        <link refid="wickr-crypto-c_8h_source"/>
      </node>
      <node id="326">
        <label>src/crypto/protocol.h</label>
        <link refid="protocol_8h_source"/>
        <childnode refid="327" relation="include">
        </childnode>
        <childnode refid="328" relation="include">
        </childnode>
      </node>
      <node id="325">
        <label>src/crypto/node.h</label>
        <link refid="node_8h"/>
        <childnode refid="326" relation="include">
        </childnode>
        <childnode refid="327" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structwickr__node" prot="public">wickr_node</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="node_8h_1aa452cd1406ee592fb238b624e3d48e24" prot="public" static="no">
        <type>wickr_array_t</type>
        <definition>typedef wickr_array_t wickr_node_array_t</definition>
        <argsstring></argsstring>
        <name>wickr_node_array_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/node.h" line="40" column="1" bodyfile="src/crypto/node.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="node_8h_1af5a23bd5b4b2b8b50a8863eb5857dc2c" prot="public" static="no">
        <type>struct <ref refid="structwickr__node" kindref="compound">wickr_node</ref></type>
        <definition>typedef struct wickr_node wickr_node_t</definition>
        <argsstring></argsstring>
        <name>wickr_node_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/node.h" line="40" column="1" bodyfile="src/crypto/node.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__wickr__node_1ga293b1210648e2db5449be23fe0f3e644" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__node" kindref="compound">wickr_node_t</ref> *</type>
        <definition>wickr_node_t* wickr_node_create</definition>
        <argsstring>(wickr_buffer_t *dev_id, wickr_identity_chain_t *id_chain, wickr_ephemeral_keypair_t *ephemeral_keypair)</argsstring>
        <name>wickr_node_create</name>
        <param>
          <type><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
          <declname>dev_id</declname>
        </param>
        <param>
          <type><ref refid="structwickr__identity__chain" kindref="compound">wickr_identity_chain_t</ref> *</type>
          <declname>id_chain</declname>
        </param>
        <param>
          <type><ref refid="structwickr__ephemeral__keypair" kindref="compound">wickr_ephemeral_keypair_t</ref> *</type>
          <declname>ephemeral_keypair</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a node from components</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev_id</parametername>
</parameternamelist>
<parameterdescription>
<para>see &apos;<ref refid="structwickr__node" kindref="compound">wickr_node</ref>&apos; property documentation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id_chain</parametername>
</parameternamelist>
<parameterdescription>
<para>see &apos;<ref refid="structwickr__node" kindref="compound">wickr_node</ref>&apos; property documentation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ephemeral_keypair</parametername>
</parameternamelist>
<parameterdescription>
<para>see &apos;<ref refid="structwickr__node" kindref="compound">wickr_node</ref>&apos; property documentation </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a newly allocated node. Takes ownership of the passed inputs </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/node.h" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__node_1ga2ed650b947df7316cf0f915805ac5aa4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wickr_node_rotate_keypair</definition>
        <argsstring>(wickr_node_t *node, wickr_ephemeral_keypair_t *new_keypair, bool copy)</argsstring>
        <name>wickr_node_rotate_keypair</name>
        <param>
          <type><ref refid="structwickr__node" kindref="compound">wickr_node_t</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="structwickr__ephemeral__keypair" kindref="compound">wickr_ephemeral_keypair_t</ref> *</type>
          <declname>new_keypair</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>copy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Rotate in a new ephemeral key pair for message sending</para><para>NOTE: This function DOES NOT ensure that new_keypair is signed properly. To do that, you must call &apos;wickr_node_verify_signature_chain&apos; after rotation</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>the node to rotate &apos;new_keypair&apos; into </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_keypair</parametername>
</parameternamelist>
<parameterdescription>
<para>the key pair to rotate into place </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>copy</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, perform a deep copy of &apos;new_keypair&apos; before rotating </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the rotation succeeds, false if the copy fails </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/node.h" line="98" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__node_1ga393c4fb42022fdc6f4336a62dbc7af91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__node" kindref="compound">wickr_node_t</ref> *</type>
        <definition>wickr_node_t* wickr_node_copy</definition>
        <argsstring>(const wickr_node_t *source)</argsstring>
        <name>wickr_node_copy</name>
        <param>
          <type>const <ref refid="structwickr__node" kindref="compound">wickr_node_t</ref> *</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy an node</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>the node to copy </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a newly allocated node holding a deep copy of the properties of &apos;source&apos; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/node.h" line="109" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__node_1ga6acf07885403d9df6baad36a8d797f73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wickr_node_destroy</definition>
        <argsstring>(wickr_node_t **node)</argsstring>
        <name>wickr_node_destroy</name>
        <param>
          <type><ref refid="structwickr__node" kindref="compound">wickr_node_t</ref> **</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy a node</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to the node to destroy. All properties of &apos;*node&apos; will also be destroyed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/node.h" line="119" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__node_1gac9e2d96e9109590124b2fd05a8826c1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wickr_node_verify_signature_chain</definition>
        <argsstring>(wickr_node_t *node, const wickr_crypto_engine_t *engine)</argsstring>
        <name>wickr_node_verify_signature_chain</name>
        <param>
          <type><ref refid="structwickr__node" kindref="compound">wickr_node_t</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__crypto__engine" kindref="compound">wickr_crypto_engine_t</ref> *</type>
          <declname>engine</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Verify the integrity of the signature chain for a node</para><para>In order to be valid, the ephemeral keypair&apos;s signature must validate with the id_chain&apos;s &apos;node&apos; public signing key. The id_chain&apos;s &apos;node&apos; signature must validate with the id_chain&apos;s &apos;root&apos; public signing key</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>the node to verify </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>engine</parametername>
</parameternamelist>
<parameterdescription>
<para>a crypto engine capable of verifying EC signatures </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the chain validates, false if there are any signature validation failures </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/node.h" line="134" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__node_1ga504ebe707aa003032c4ac8044d73ee92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wickr_node_array_t *</type>
        <definition>wickr_node_array_t* wickr_node_array_new</definition>
        <argsstring>(uint32_t node_count)</argsstring>
        <name>wickr_node_array_new</name>
        <param>
          <type>uint32_t</type>
          <declname>node_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an array of nodes</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_count</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of nodes the array should hold </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a newly allocated array with enough space to hold &apos;node_count&apos; nodes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/node.h" line="145" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__node_1gae511a75489982fc2e90271be63d9d753" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wickr_node_array_set_item</definition>
        <argsstring>(wickr_array_t *array, uint32_t index, wickr_node_t *node)</argsstring>
        <name>wickr_node_array_set_item</name>
        <param>
          <type>wickr_array_t *</type>
          <declname>array</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="structwickr__node" kindref="compound">wickr_node_t</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set an item in the node array</para><para>NOTE: &apos;node&apos; is not copied into the array, ownership is simply transferred to the array</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>the array to set a node into </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index to place the node into the array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>the node to place at &apos;index&apos; in the array </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the insert succeeds, false if the index is out of range </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/node.h" line="160" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__node_1ga878a3015abc8563d512c0e5acf10df60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__node" kindref="compound">wickr_node_t</ref> *</type>
        <definition>wickr_node_t* wickr_node_array_fetch_item</definition>
        <argsstring>(const wickr_array_t *array, uint32_t index)</argsstring>
        <name>wickr_node_array_fetch_item</name>
        <param>
          <type>const wickr_array_t *</type>
          <declname>array</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fetch an item in the node array</para><para>NOTE: a fetched node is not copied out of the array, it is still owned by the array</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>the array to fetch from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index in the array to fetch from </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the node at &apos;index&apos;. NULL if the index is out of bounds </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/node.h" line="174" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__node_1gab577103b1752357b8575b064e22a4970" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wickr_node_array_t *</type>
        <definition>wickr_node_array_t* wickr_node_array_copy</definition>
        <argsstring>(const wickr_node_array_t *array)</argsstring>
        <name>wickr_node_array_copy</name>
        <param>
          <type>const wickr_node_array_t *</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Make a deep copy of a node array</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>the array to copy </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a newly allocated wickr_node_array that contains a copy of each element from &apos;array&apos; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/node.h" line="185" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__node_1gab3f40f122baca50bcc62af54eaa08fe9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wickr_node_array_destroy</definition>
        <argsstring>(wickr_node_array_t **array)</argsstring>
        <name>wickr_node_array_destroy</name>
        <param>
          <type>wickr_node_array_t **</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy a node array</para><para>NOTE: Nodes in the array are not destroyed, only the container array</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>the array to destroy </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/node.h" line="197" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>©<sp/>2012-2017<sp/>Wickr<sp/>Inc.<sp/><sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>This<sp/>code<sp/>is<sp/>being<sp/>released<sp/>for<sp/>EDUCATIONAL,<sp/>ACADEMIC,<sp/>AND<sp/>CODE<sp/>REVIEW<sp/>PURPOSES</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>ONLY.<sp/><sp/>COMMERCIAL<sp/>USE<sp/>OF<sp/>THE<sp/>CODE<sp/>IS<sp/>EXPRESSLY<sp/>PROHIBITED.<sp/><sp/>For<sp/>additional<sp/>details,</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>please<sp/>see<sp/>LICENSE</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>THE<sp/>CODE<sp/>IS<sp/>MADE<sp/>AVAILABLE<sp/>&quot;AS-IS&quot;<sp/>AND<sp/>WITHOUT<sp/>ANY<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>GUARANTEES<sp/>AS<sp/>TO<sp/>FITNESS,<sp/>MERCHANTABILITY,<sp/>NON-</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>INFRINGEMENT<sp/>OR<sp/>OTHERWISE.<sp/>IT<sp/>IS<sp/>NOT<sp/>BEING<sp/>PROVIDED<sp/>IN<sp/>TRADE<sp/>BUT<sp/>ON</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>A<sp/>VOLUNTARY<sp/>BASIS<sp/>ON<sp/>BEHALF<sp/>OF<sp/>THE<sp/>AUTHOR’S<sp/>PART<sp/>FOR<sp/>THE<sp/>BENEFIT</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>OF<sp/>THE<sp/>LICENSEE<sp/>AND<sp/>IS<sp/>NOT<sp/>MADE<sp/>AVAILABLE<sp/>FOR<sp/>CONSUMER<sp/>USE<sp/>OR<sp/>ANY</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>OTHER<sp/>USE<sp/>OUTSIDE<sp/>THE<sp/>TERMS<sp/>OF<sp/>THIS<sp/>LICENSE.<sp/>ANYONE<sp/>ACCESSING<sp/>THE</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>CODE<sp/>SHOULD<sp/>HAVE<sp/>THE<sp/>REQUISITE<sp/>EXPERTISE<sp/>TO<sp/>SECURE<sp/>THEIR<sp/>SYSTEM</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>AND<sp/>DEVICES<sp/>AND<sp/>TO<sp/>ACCESS<sp/>AND<sp/>USE<sp/>THE<sp/>CODE<sp/>FOR<sp/>REVIEW<sp/>PURPOSES</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>ONLY.<sp/>LICENSEE<sp/>BEARS<sp/>THE<sp/>RISK<sp/>OF<sp/>ACCESSING<sp/>AND<sp/>USING<sp/>THE<sp/>CODE.<sp/>IN</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>PARTICULAR,<sp/>AUTHOR<sp/>BEARS<sp/>NO<sp/>LIABILITY<sp/>FOR<sp/>ANY<sp/>INTERFERENCE<sp/>WITH<sp/>OR</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>ADVERSE<sp/>EFFECT<sp/>THAT<sp/>MAY<sp/>OCCUR<sp/>AS<sp/>A<sp/>RESULT<sp/>OF<sp/>THE<sp/>LICENSEE</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>ACCESSING<sp/>AND/OR<sp/>USING<sp/>THE<sp/>CODE<sp/>ON<sp/>LICENSEE’S<sp/>SYSTEM.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>node_h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>node_h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;buffer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ecdsa.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;eckey.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;devinfo.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;crypto_engine.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;root_keys.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;identity.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ephemeral_keypair.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;array.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>wickr_array_t<sp/>wickr_node_array_t;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="structwickr__node" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structwickr__node" kindref="compound">wickr_node</ref><sp/>{</highlight></codeline>
<codeline lineno="65" refid="structwickr__node_1a564e42fc1d4b63353d74e5fbf0bead82" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref><sp/>*<ref refid="structwickr__node_1a564e42fc1d4b63353d74e5fbf0bead82" kindref="member">dev_id</ref>;</highlight></codeline>
<codeline lineno="66" refid="structwickr__node_1a3a5100ed26ae534e2070623713aacfde" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structwickr__identity__chain" kindref="compound">wickr_identity_chain_t</ref><sp/>*<ref refid="structwickr__node_1a3a5100ed26ae534e2070623713aacfde" kindref="member">id_chain</ref>;</highlight></codeline>
<codeline lineno="67" refid="structwickr__node_1a628b61eed5cb17b831ff687143393b93" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structwickr__ephemeral__keypair" kindref="compound">wickr_ephemeral_keypair_t</ref><sp/>*<ref refid="structwickr__node_1a628b61eed5cb17b831ff687143393b93" kindref="member">ephemeral_keypair</ref>;</highlight></codeline>
<codeline lineno="68"><highlight class="normal">};</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structwickr__node" kindref="compound">wickr_node</ref><sp/><ref refid="structwickr__node" kindref="compound">wickr_node_t</ref>;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><ref refid="structwickr__node" kindref="compound">wickr_node_t</ref><sp/>*<ref refid="group__wickr__node_1ga293b1210648e2db5449be23fe0f3e644" kindref="member">wickr_node_create</ref>(<ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref><sp/>*<ref refid="structwickr__node_1a564e42fc1d4b63353d74e5fbf0bead82" kindref="member">dev_id</ref>,<sp/><ref refid="structwickr__identity__chain" kindref="compound">wickr_identity_chain_t</ref><sp/>*<ref refid="structwickr__node_1a3a5100ed26ae534e2070623713aacfde" kindref="member">id_chain</ref>,<sp/><ref refid="structwickr__ephemeral__keypair" kindref="compound">wickr_ephemeral_keypair_t</ref><sp/>*<ref refid="structwickr__node_1a628b61eed5cb17b831ff687143393b93" kindref="member">ephemeral_keypair</ref>);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__wickr__node_1ga2ed650b947df7316cf0f915805ac5aa4" kindref="member">wickr_node_rotate_keypair</ref>(<ref refid="structwickr__node" kindref="compound">wickr_node_t</ref><sp/>*node,<sp/><ref refid="structwickr__ephemeral__keypair" kindref="compound">wickr_ephemeral_keypair_t</ref><sp/>*new_keypair,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>copy);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><ref refid="structwickr__node" kindref="compound">wickr_node_t</ref><sp/>*<ref refid="group__wickr__node_1ga393c4fb42022fdc6f4336a62dbc7af91" kindref="member">wickr_node_copy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwickr__node" kindref="compound">wickr_node_t</ref><sp/>*source);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__wickr__node_1ga6acf07885403d9df6baad36a8d797f73" kindref="member">wickr_node_destroy</ref>(<ref refid="structwickr__node" kindref="compound">wickr_node_t</ref><sp/>**node);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__wickr__node_1gac9e2d96e9109590124b2fd05a8826c1d" kindref="member">wickr_node_verify_signature_chain</ref>(<ref refid="structwickr__node" kindref="compound">wickr_node_t</ref><sp/>*node,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwickr__crypto__engine" kindref="compound">wickr_crypto_engine_t</ref><sp/>*engine);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal">wickr_node_array_t<sp/>*<ref refid="group__wickr__node_1ga504ebe707aa003032c4ac8044d73ee92" kindref="member">wickr_node_array_new</ref>(uint32_t<sp/>node_count);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__wickr__node_1gae511a75489982fc2e90271be63d9d753" kindref="member">wickr_node_array_set_item</ref>(wickr_array_t<sp/>*array,<sp/>uint32_t<sp/>index,<sp/><ref refid="structwickr__node" kindref="compound">wickr_node_t</ref><sp/>*node);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><ref refid="structwickr__node" kindref="compound">wickr_node_t</ref><sp/>*<ref refid="group__wickr__node_1ga878a3015abc8563d512c0e5acf10df60" kindref="member">wickr_node_array_fetch_item</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>wickr_array_t<sp/>*array,<sp/>uint32_t<sp/>index);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal">wickr_node_array_t<sp/>*<ref refid="group__wickr__node_1gab577103b1752357b8575b064e22a4970" kindref="member">wickr_node_array_copy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>wickr_node_array_t<sp/>*array);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__wickr__node_1gab3f40f122baca50bcc62af54eaa08fe9" kindref="member">wickr_node_array_destroy</ref>(wickr_node_array_t<sp/>**array);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>node_h<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="src/crypto/node.h"/>
  </compounddef>
</doxygen>
