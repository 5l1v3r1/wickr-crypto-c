<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="protocol_8h" kind="file" language="C++">
    <compoundname>protocol.h</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes refid="node_8h" local="yes">node.h</includes>
    <includes refid="ecdh_8h" local="yes">ecdh.h</includes>
    <includedby refid="wickr-crypto-c_8h" local="yes">src/crypto/wickr-crypto-c.h</includedby>
    <includedby refid="wickr__ctx_8h" local="yes">src/crypto/wickr_ctx.h</includedby>
    <incdepgraph>
      <node id="392">
        <label>ephemeral_keypair.h</label>
        <link refid="ephemeral__keypair_8h_source"/>
        <childnode refid="373" relation="include">
        </childnode>
        <childnode refid="380" relation="include">
        </childnode>
        <childnode refid="381" relation="include">
        </childnode>
        <childnode refid="384" relation="include">
        </childnode>
        <childnode refid="391" relation="include">
        </childnode>
      </node>
      <node id="376">
        <label>stdbool.h</label>
      </node>
      <node id="389">
        <label>root_keys.h</label>
        <link refid="root__keys_8h_source"/>
        <childnode refid="373" relation="include">
        </childnode>
        <childnode refid="375" relation="include">
        </childnode>
        <childnode refid="381" relation="include">
        </childnode>
        <childnode refid="384" relation="include">
        </childnode>
        <childnode refid="390" relation="include">
        </childnode>
        <childnode refid="383" relation="include">
        </childnode>
      </node>
      <node id="377">
        <label>stdint.h</label>
      </node>
      <node id="373">
        <label>stdlib.h</label>
      </node>
      <node id="384">
        <label>crypto_engine.h</label>
        <link refid="crypto__engine_8h_source"/>
        <childnode refid="375" relation="include">
        </childnode>
        <childnode refid="385" relation="include">
        </childnode>
        <childnode refid="382" relation="include">
        </childnode>
        <childnode refid="381" relation="include">
        </childnode>
        <childnode refid="380" relation="include">
        </childnode>
        <childnode refid="387" relation="include">
        </childnode>
        <childnode refid="386" relation="include">
        </childnode>
        <childnode refid="373" relation="include">
        </childnode>
        <childnode refid="388" relation="include">
        </childnode>
      </node>
      <node id="390">
        <label>storage.h</label>
        <link refid="storage_8h_source"/>
        <childnode refid="373" relation="include">
        </childnode>
        <childnode refid="375" relation="include">
        </childnode>
        <childnode refid="384" relation="include">
        </childnode>
      </node>
      <node id="379">
        <label>limits.h</label>
      </node>
      <node id="387">
        <label>ecdh.h</label>
        <link refid="ecdh_8h_source"/>
        <childnode refid="373" relation="include">
        </childnode>
        <childnode refid="381" relation="include">
        </childnode>
        <childnode refid="382" relation="include">
        </childnode>
        <childnode refid="386" relation="include">
        </childnode>
      </node>
      <node id="372">
        <label>src/crypto/protocol.h</label>
        <link refid="protocol_8h"/>
        <childnode refid="373" relation="include">
        </childnode>
        <childnode refid="374" relation="include">
        </childnode>
        <childnode refid="387" relation="include">
        </childnode>
      </node>
      <node id="386">
        <label>kdf.h</label>
        <link refid="kdf_8h_source"/>
        <childnode refid="375" relation="include">
        </childnode>
        <childnode refid="382" relation="include">
        </childnode>
      </node>
      <node id="378">
        <label>array.h</label>
        <link refid="array_8h_source"/>
        <childnode refid="373" relation="include">
        </childnode>
        <childnode refid="375" relation="include">
        </childnode>
      </node>
      <node id="374">
        <label>node.h</label>
        <link refid="node_8h_source"/>
        <childnode refid="373" relation="include">
        </childnode>
        <childnode refid="375" relation="include">
        </childnode>
        <childnode refid="380" relation="include">
        </childnode>
        <childnode refid="381" relation="include">
        </childnode>
        <childnode refid="383" relation="include">
        </childnode>
        <childnode refid="384" relation="include">
        </childnode>
        <childnode refid="389" relation="include">
        </childnode>
        <childnode refid="391" relation="include">
        </childnode>
        <childnode refid="392" relation="include">
        </childnode>
        <childnode refid="378" relation="include">
        </childnode>
      </node>
      <node id="382">
        <label>digest.h</label>
        <link refid="digest_8h_source"/>
        <childnode refid="373" relation="include">
        </childnode>
        <childnode refid="377" relation="include">
        </childnode>
      </node>
      <node id="375">
        <label>buffer.h</label>
        <link refid="buffer_8h_source"/>
        <childnode refid="373" relation="include">
        </childnode>
        <childnode refid="376" relation="include">
        </childnode>
        <childnode refid="377" relation="include">
        </childnode>
        <childnode refid="378" relation="include">
        </childnode>
        <childnode refid="379" relation="include">
        </childnode>
      </node>
      <node id="385">
        <label>cipher.h</label>
        <link refid="cipher_8h_source"/>
        <childnode refid="373" relation="include">
        </childnode>
        <childnode refid="375" relation="include">
        </childnode>
        <childnode refid="386" relation="include">
        </childnode>
      </node>
      <node id="383">
        <label>devinfo.h</label>
        <link refid="devinfo_8h_source"/>
        <childnode refid="373" relation="include">
        </childnode>
        <childnode refid="375" relation="include">
        </childnode>
        <childnode refid="384" relation="include">
        </childnode>
      </node>
      <node id="391">
        <label>identity.h</label>
        <link refid="identity_8h_source"/>
        <childnode refid="373" relation="include">
        </childnode>
        <childnode refid="375" relation="include">
        </childnode>
        <childnode refid="381" relation="include">
        </childnode>
        <childnode refid="380" relation="include">
        </childnode>
        <childnode refid="384" relation="include">
        </childnode>
        <childnode refid="389" relation="include">
        </childnode>
      </node>
      <node id="388">
        <label>stdio.h</label>
      </node>
      <node id="380">
        <label>ecdsa.h</label>
        <link refid="ecdsa_8h_source"/>
        <childnode refid="373" relation="include">
        </childnode>
        <childnode refid="381" relation="include">
        </childnode>
        <childnode refid="382" relation="include">
        </childnode>
      </node>
      <node id="381">
        <label>eckey.h</label>
        <link refid="eckey_8h_source"/>
        <childnode refid="373" relation="include">
        </childnode>
        <childnode refid="375" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="395">
        <label>src/crypto/wickr_ctx.h</label>
        <link refid="wickr__ctx_8h_source"/>
        <childnode refid="394" relation="include">
        </childnode>
      </node>
      <node id="394">
        <label>src/crypto/wickr-crypto-c.h</label>
        <link refid="wickr-crypto-c_8h_source"/>
      </node>
      <node id="393">
        <label>src/crypto/protocol.h</label>
        <link refid="protocol_8h"/>
        <childnode refid="394" relation="include">
        </childnode>
        <childnode refid="395" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structwickr__ephemeral__info" prot="public">wickr_ephemeral_info</innerclass>
    <innerclass refid="structwickr__packet__meta" prot="public">wickr_packet_meta</innerclass>
    <innerclass refid="structwickr__key__exchange" prot="public">wickr_key_exchange</innerclass>
    <innerclass refid="structwickr__packet__header" prot="public">wickr_packet_header</innerclass>
    <innerclass refid="structwickr__payload" prot="public">wickr_payload</innerclass>
    <innerclass refid="structwickr__packet" prot="public">wickr_packet</innerclass>
    <innerclass refid="structwickr__parse__result" prot="public">wickr_parse_result</innerclass>
    <innerclass refid="structwickr__decode__result" prot="public">wickr_decode_result</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__wickr__protocol_1gad269883d0b8b26c4fa52da595ef5ddf7" prot="public" static="no">
        <name>OLDEST_PACKET_VERSION</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The oldest packet version supported is version 2 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="41" column="9" bodyfile="src/crypto/protocol.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__wickr__protocol_1ga89ff9f93c5494db53d3ff27353989862" prot="public" static="no">
        <name>CURRENT_PACKET_VERSION</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The most recent version of the protocol is version 4 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="47" column="9" bodyfile="src/crypto/protocol.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="protocol_8h_1a4b245ff156d221f3721662f757552754" prot="public" static="no">
        <name>wickr_decode_error</name>
        <enumvalue id="protocol_8h_1a4b245ff156d221f3721662f757552754ac3121e429a129b2ccb51a92b7c78c4b4" prot="public">
          <name>E_SUCCESS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="protocol_8h_1a4b245ff156d221f3721662f757552754a226a4b853e9a35491795c4da13f7bd18" prot="public">
          <name>ERROR_INVALID_INPUT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="protocol_8h_1a4b245ff156d221f3721662f757552754ab4be85a7d0f6a45353eee255738152c3" prot="public">
          <name>ERROR_NODE_NOT_FOUND</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="protocol_8h_1a4b245ff156d221f3721662f757552754a786b55bb9a7e3b07dedde4df602f21b3" prot="public">
          <name>ERROR_CORRUPT_PACKET</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="protocol_8h_1a4b245ff156d221f3721662f757552754a895cf878b01594024252e4e20e72a3c7" prot="public">
          <name>ERROR_KEY_EXCHANGE_FAILED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="protocol_8h_1a4b245ff156d221f3721662f757552754a3ed084af9dc88bcd3ce4a4bed9132c67" prot="public">
          <name>ERROR_MAC_INVALID</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="49" column="1" bodyfile="src/crypto/protocol.h" bodystart="49" bodyend="56"/>
      </memberdef>
      <memberdef kind="enum" id="protocol_8h_1ac99d3d52acf2a2f3f0cdfd0edbd42b0c" prot="public" static="no">
        <name>wickr_packet_signature_status</name>
        <enumvalue id="protocol_8h_1ac99d3d52acf2a2f3f0cdfd0edbd42b0ca9aae1df8edf3a099e1f9675ab97a7214" prot="public">
          <name>PACKET_SIGNATURE_UNKNOWN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="protocol_8h_1ac99d3d52acf2a2f3f0cdfd0edbd42b0caa5c09a23bbd87d877f0fb6a69e18a6d1" prot="public">
          <name>PACKET_SIGNATURE_VALID</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="protocol_8h_1ac99d3d52acf2a2f3f0cdfd0edbd42b0ca8ee43ccfbd895ffabb3cf2ae3b9f9240" prot="public">
          <name>PACKET_SIGNATURE_INVALID</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="58" column="1" bodyfile="src/crypto/protocol.h" bodystart="58" bodyend="62"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="protocol_8h_1a97405b0f2f2f09adb2f957c2076c46cf" prot="public" static="no">
        <type>struct <ref refid="structwickr__ephemeral__info" kindref="compound">wickr_ephemeral_info</ref></type>
        <definition>typedef struct wickr_ephemeral_info wickr_ephemeral_info_t</definition>
        <argsstring></argsstring>
        <name>wickr_ephemeral_info_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="57" column="1" bodyfile="src/crypto/protocol.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="protocol_8h_1ab7f760db6462f9fd0868154eab37f39a" prot="public" static="no">
        <type>struct <ref refid="structwickr__packet__meta" kindref="compound">wickr_packet_meta</ref></type>
        <definition>typedef struct wickr_packet_meta wickr_packet_meta_t</definition>
        <argsstring></argsstring>
        <name>wickr_packet_meta_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="57" column="1" bodyfile="src/crypto/protocol.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="protocol_8h_1aa8e0e62ac783f6a51e71d5fb96089f29" prot="public" static="no">
        <type>struct <ref refid="structwickr__key__exchange" kindref="compound">wickr_key_exchange</ref></type>
        <definition>typedef struct wickr_key_exchange wickr_key_exchange_t</definition>
        <argsstring></argsstring>
        <name>wickr_key_exchange_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="134" column="1" bodyfile="src/crypto/protocol.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="protocol_8h_1aaf6950a04e82d6c71fca503cce47b660" prot="public" static="no">
        <type>wickr_array_t</type>
        <definition>typedef wickr_array_t wickr_exchange_array_t</definition>
        <argsstring></argsstring>
        <name>wickr_exchange_array_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="238" column="1" bodyfile="src/crypto/protocol.h" bodystart="238" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="protocol_8h_1ae373f825d5be7db310839c0fe301add3" prot="public" static="no">
        <type>struct <ref refid="structwickr__packet__header" kindref="compound">wickr_packet_header</ref></type>
        <definition>typedef struct wickr_packet_header wickr_packet_header_t</definition>
        <argsstring></argsstring>
        <name>wickr_packet_header_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="291" column="1" bodyfile="src/crypto/protocol.h" bodystart="308" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="protocol_8h_1a12bb197a34546b389171e2a78a6cd469" prot="public" static="no">
        <type>struct <ref refid="structwickr__payload" kindref="compound">wickr_payload</ref></type>
        <definition>typedef struct wickr_payload wickr_payload_t</definition>
        <argsstring></argsstring>
        <name>wickr_payload_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="384" column="1" bodyfile="src/crypto/protocol.h" bodystart="402" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="protocol_8h_1aa4b29e0eabca88a61fc9289bdbf899a6" prot="public" static="no">
        <type>struct <ref refid="structwickr__packet" kindref="compound">wickr_packet</ref></type>
        <definition>typedef struct wickr_packet wickr_packet_t</definition>
        <argsstring></argsstring>
        <name>wickr_packet_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="466" column="1" bodyfile="src/crypto/protocol.h" bodystart="488" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="protocol_8h_1a0052f64a3f61ec3997cf2ba978a7a1d7" prot="public" static="no">
        <type>struct <ref refid="structwickr__parse__result" kindref="compound">wickr_parse_result</ref></type>
        <definition>typedef struct wickr_parse_result wickr_parse_result_t</definition>
        <argsstring></argsstring>
        <name>wickr_parse_result_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="542" column="1" bodyfile="src/crypto/protocol.h" bodystart="568" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="protocol_8h_1add0cc09e8dc85dfa45d37740383356ef" prot="public" static="no">
        <type>struct <ref refid="structwickr__decode__result" kindref="compound">wickr_decode_result</ref></type>
        <definition>typedef struct wickr_decode_result wickr_decode_result_t</definition>
        <argsstring></argsstring>
        <name>wickr_decode_result_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="615" column="1" bodyfile="src/crypto/protocol.h" bodystart="634" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="protocol_8h_1a7a50ca87cfcf45d598e6069b81d7eab9" prot="public" static="no">
        <type><ref refid="structwickr__cipher__key" kindref="compound">wickr_cipher_key_t</ref> *(*</type>
        <definition>typedef wickr_cipher_key_t*(* wickr_header_keygen_func) (const wickr_crypto_engine_t engine, wickr_cipher_t cipher, const wickr_identity_chain_t *id_chain)</definition>
        <argsstring>)(const wickr_crypto_engine_t engine, wickr_cipher_t cipher, const wickr_identity_chain_t *id_chain)</argsstring>
        <name>wickr_header_keygen_func</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="706" column="1" bodyfile="src/crypto/protocol.h" bodystart="706" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__wickr__protocol_1ga146144d74da12c1fff766462fe7fa661" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__packet__meta" kindref="compound">wickr_packet_meta_t</ref> *</type>
        <definition>wickr_packet_meta_t* wickr_packet_meta_create</definition>
        <argsstring>(wickr_ephemeral_info_t ephemerality_settings, wickr_buffer_t *channel_tag, uint16_t content_type)</argsstring>
        <name>wickr_packet_meta_create</name>
        <param>
          <type><ref refid="structwickr__ephemeral__info" kindref="compound">wickr_ephemeral_info_t</ref></type>
          <declname>ephemerality_settings</declname>
        </param>
        <param>
          <type><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
          <declname>channel_tag</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>content_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct packet metadata from components</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ephemerality_settings</parametername>
</parameternamelist>
<parameterdescription>
<para>see &apos;<ref refid="structwickr__packet__meta" kindref="compound">wickr_packet_meta</ref>&apos; property documentation property documentation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_tag</parametername>
</parameternamelist>
<parameterdescription>
<para>see &apos;<ref refid="structwickr__packet__meta" kindref="compound">wickr_packet_meta</ref>&apos; property documentation property documentation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>content_type</parametername>
</parameternamelist>
<parameterdescription>
<para>see &apos;<ref refid="structwickr__packet__meta" kindref="compound">wickr_packet_meta</ref>&apos; property documentation property documentation </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a newly allocated packet metadata set owning the properties passed in </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="111" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__protocol_1ga1bb5a0f2a49069679b174b3e6521fe9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__packet__meta" kindref="compound">wickr_packet_meta_t</ref> *</type>
        <definition>wickr_packet_meta_t* wickr_packet_meta_copy</definition>
        <argsstring>(const wickr_packet_meta_t *source)</argsstring>
        <name>wickr_packet_meta_copy</name>
        <param>
          <type>const <ref refid="structwickr__packet__meta" kindref="compound">wickr_packet_meta_t</ref> *</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy an packet metadata set</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>the packet metadata set to copy </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a newly packet metadata set holding a deep copy of the properties of &apos;source&apos; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__protocol_1gad165ad670da761478cf5f8f91223c1d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wickr_packet_meta_destroy</definition>
        <argsstring>(wickr_packet_meta_t **meta)</argsstring>
        <name>wickr_packet_meta_destroy</name>
        <param>
          <type><ref refid="structwickr__packet__meta" kindref="compound">wickr_packet_meta_t</ref> **</type>
          <declname>meta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy packet metadata set</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>meta</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to the result to destroy. All properties of &apos;*meta&apos; will also be destroyed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="134" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__protocol_1gac2823b3430070b0db9ef1f40d3a804ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__key__exchange" kindref="compound">wickr_key_exchange_t</ref> *</type>
        <definition>wickr_key_exchange_t* wickr_key_exchange_create</definition>
        <argsstring>(wickr_buffer_t *node_id, uint64_t ephemeral_key_id, wickr_buffer_t *exchange_data)</argsstring>
        <name>wickr_key_exchange_create</name>
        <param>
          <type><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
          <declname>node_id</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>ephemeral_key_id</declname>
        </param>
        <param>
          <type><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
          <declname>exchange_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a key exchange from properties</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>see &apos;<ref refid="structwickr__key__exchange" kindref="compound">wickr_key_exchange</ref>&apos; property documentation property documentation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ephemeral_key_id</parametername>
</parameternamelist>
<parameterdescription>
<para>see &apos;<ref refid="structwickr__key__exchange" kindref="compound">wickr_key_exchange</ref>&apos; property documentation property documentation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exchange_data</parametername>
</parameternamelist>
<parameterdescription>
<para>see &apos;<ref refid="structwickr__key__exchange" kindref="compound">wickr_key_exchange</ref>&apos; property documentation property documentation </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a newly allocated packet metadata set owning the properties passed in </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="166" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__protocol_1gae031f68d2286e0399d90b0316a7d5299" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__key__exchange" kindref="compound">wickr_key_exchange_t</ref> *</type>
        <definition>wickr_key_exchange_t* wickr_key_exchange_create_from_components</definition>
        <argsstring>(const wickr_crypto_engine_t *engine, const wickr_identity_chain_t *sender, const wickr_node_t *receiver, wickr_ec_key_t *packet_exchange_key, const wickr_cipher_key_t *packet_key, uint8_t version)</argsstring>
        <name>wickr_key_exchange_create_from_components</name>
        <param>
          <type>const <ref refid="structwickr__crypto__engine" kindref="compound">wickr_crypto_engine_t</ref> *</type>
          <declname>engine</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__identity__chain" kindref="compound">wickr_identity_chain_t</ref> *</type>
          <declname>sender</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__node" kindref="compound">wickr_node_t</ref> *</type>
          <declname>receiver</declname>
        </param>
        <param>
          <type><ref refid="structwickr__ec__key" kindref="compound">wickr_ec_key_t</ref> *</type>
          <declname>packet_exchange_key</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__cipher__key" kindref="compound">wickr_cipher_key_t</ref> *</type>
          <declname>packet_key</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>version</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute a key exchange given sender/receiver information (Sender Encoding)</para><para>See Wickr white paper &apos;Prepare Key Exchange Data&apos; for more information</para><para>NOTE: This is a low level function that should not be called directly from this API if it can be avoided. Please use the &apos;<ref refid="structwickr__ctx" kindref="compound">wickr_ctx</ref>&apos; API instead since it is a higher level and safer set of functions</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>engine</parametername>
</parameternamelist>
<parameterdescription>
<para>a crypto engine supporting ECDH key exchanges </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sender</parametername>
</parameternamelist>
<parameterdescription>
<para>the identity chain of the sender </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>receiver</parametername>
</parameternamelist>
<parameterdescription>
<para>the node this key exchange is destined for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>packet_exchange_key</parametername>
</parameternamelist>
<parameterdescription>
<para>an EC key to use for the sender side of the ECDH function, the private component of this key is no longer needed after this function is called. The public component of it will get forwarded in the message header to the receiver </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>packet_key</parametername>
</parameternamelist>
<parameterdescription>
<para>the cipher key to use for encrypting the payload of the message that is being created. This is the data we are protecting </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>version</parametername>
</parameternamelist>
<parameterdescription>
<para>the version of the packet being generated </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a newly allocated key exchange object holding public metadata about this exchange and the computed exchange data </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="188" column="1"/>
      </memberdef>
      <memberdef kind="function" id="protocol_8h_1a27a4bb0255eade51b32f62020aca04d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__cipher__key" kindref="compound">wickr_cipher_key_t</ref> *</type>
        <definition>wickr_cipher_key_t* wickr_key_exchange_derive_packet_key</definition>
        <argsstring>(const wickr_crypto_engine_t *engine, const wickr_identity_chain_t *sender, const wickr_node_t *receiver, wickr_ec_key_t *packet_exchange_key, const wickr_key_exchange_t *exchange, uint8_t version)</argsstring>
        <name>wickr_key_exchange_derive_packet_key</name>
        <param>
          <type>const <ref refid="structwickr__crypto__engine" kindref="compound">wickr_crypto_engine_t</ref> *</type>
          <declname>engine</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__identity__chain" kindref="compound">wickr_identity_chain_t</ref> *</type>
          <declname>sender</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__node" kindref="compound">wickr_node_t</ref> *</type>
          <declname>receiver</declname>
        </param>
        <param>
          <type><ref refid="structwickr__ec__key" kindref="compound">wickr_ec_key_t</ref> *</type>
          <declname>packet_exchange_key</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__key__exchange" kindref="compound">wickr_key_exchange_t</ref> *</type>
          <declname>exchange</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>version</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Derive a packet key given a key exchange, and a receiver private exchange key (Receiver Decoding)</para><para>See Wickr white paper &apos;Receiving a Message&apos; for more information</para><para>NOTE: This is a low level function that should not be called directly from this API if it can be avoided. Please use the &apos;<ref refid="structwickr__ctx" kindref="compound">wickr_ctx</ref>&apos; API instead since it is a higher level and safer set of functions</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>engine</parametername>
</parameternamelist>
<parameterdescription>
<para>a crypto engine supporting ECDH key exchanges </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sender</parametername>
</parameternamelist>
<parameterdescription>
<para>the identity chain of the original creator of the key exchange </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>receiver</parametername>
</parameternamelist>
<parameterdescription>
<para>a node representing the receiver, including an &apos;ephemeral_keyair&apos; property that has a matching identifier to &apos;ephemeral_key_id&apos; in the key exchange, and the proper private key materal associated with it </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>packet_exchange_key</parametername>
</parameternamelist>
<parameterdescription>
<para>the public EC key information that was used for the &apos;packet_exchange_key&apos; param of &apos;wickr_key_exchange_create_from_components&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exchange</parametername>
</parameternamelist>
<parameterdescription>
<para>the key exchange to decode into a cipher key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>version</parametername>
</parameternamelist>
<parameterdescription>
<para>the version of the packet being decoded </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a cipher key or NULL if provided receiver key is incorrect and a cipher key cannot be decoded </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="210" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__protocol_1ga2235a7c168e3806aa1a71b5a5c8dee48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__key__exchange" kindref="compound">wickr_key_exchange_t</ref> *</type>
        <definition>wickr_key_exchange_t* wickr_key_exchange_copy</definition>
        <argsstring>(const wickr_key_exchange_t *source)</argsstring>
        <name>wickr_key_exchange_copy</name>
        <param>
          <type>const <ref refid="structwickr__key__exchange" kindref="compound">wickr_key_exchange_t</ref> *</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy a key exchange</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>the key exchange to copy </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a newly allocated node holding a deep copy of the properties of &apos;source&apos; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="226" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__protocol_1ga54b6481f8f4b61fb949bec17d47cd3de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wickr_key_exchange_destroy</definition>
        <argsstring>(wickr_key_exchange_t **exchange)</argsstring>
        <name>wickr_key_exchange_destroy</name>
        <param>
          <type><ref refid="structwickr__key__exchange" kindref="compound">wickr_key_exchange_t</ref> **</type>
          <declname>exchange</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy a key exchange</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>exchange</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to the key exchange to destroy. All properties of &apos;*exchange&apos; will also be destroyed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="236" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__protocol_1ga907d700b76b748f80796b4404c7172c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wickr_exchange_array_t *</type>
        <definition>wickr_exchange_array_t* wickr_exchange_array_new</definition>
        <argsstring>(uint32_t exchange_count)</argsstring>
        <name>wickr_exchange_array_new</name>
        <param>
          <type>uint32_t</type>
          <declname>exchange_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate a new key exchange array</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>exchange_count</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of exchanges the array should hold </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a newly allocated wickr_array for key exchange objects </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="249" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__protocol_1gad3c6687c07ae5e66efcbc55da0febd85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wickr_exchange_array_set_item</definition>
        <argsstring>(wickr_exchange_array_t *array, uint32_t index, wickr_key_exchange_t *exchange)</argsstring>
        <name>wickr_exchange_array_set_item</name>
        <param>
          <type>wickr_exchange_array_t *</type>
          <declname>array</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="structwickr__key__exchange" kindref="compound">wickr_key_exchange_t</ref> *</type>
          <declname>exchange</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set an item in a key exchange array</para><para>NOTE: Calling this function does not make a copy of &apos;exchange&apos;, the array simply takes ownership of it</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>the array to set &apos;exchange&apos; into </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the location in &apos;array&apos; to set exchange </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exchange</parametername>
</parameternamelist>
<parameterdescription>
<para>the exchange to set at position &apos;index&apos; in &apos;array&apos; </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if setting succeeds, false if the index is out of bounds </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="263" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__protocol_1ga333510c3c7eeb8e33f94495de6bb122d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__key__exchange" kindref="compound">wickr_key_exchange_t</ref> *</type>
        <definition>wickr_key_exchange_t* wickr_exchange_array_fetch_item</definition>
        <argsstring>(wickr_exchange_array_t *array, uint32_t index)</argsstring>
        <name>wickr_exchange_array_fetch_item</name>
        <param>
          <type>wickr_exchange_array_t *</type>
          <declname>array</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fetch a key exchange from an exchange array</para><para>NOTE: Calling this function does not make a copy of the exchange being returned, the array still owns it</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>the array to fetch &apos;index&apos; from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index to fetch from &apos;array&apos; </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a key exchange representing &apos;index&apos; from the array </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="276" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__protocol_1gacd04405337871aa3bcd550a051d778e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>wickr_array_t *</type>
        <definition>wickr_array_t* wickr_exchange_array_copy</definition>
        <argsstring>(wickr_exchange_array_t *array)</argsstring>
        <name>wickr_exchange_array_copy</name>
        <param>
          <type>wickr_exchange_array_t *</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>the array to copy </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a newly allocated key exchange array that contains deep copies of the items from &apos;array&apos; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="284" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__protocol_1gadc1e5f5836bc09c1d6b8d6203d02a0eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wickr_exchange_array_destroy</definition>
        <argsstring>(wickr_exchange_array_t **array)</argsstring>
        <name>wickr_exchange_array_destroy</name>
        <param>
          <type>wickr_exchange_array_t **</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to the array to destroy, all items of &apos;*array&apos; are also destroyed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="291" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__protocol_1ga8ad519d1b5dc3960c426db9a556404e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__packet__header" kindref="compound">wickr_packet_header_t</ref> *</type>
        <definition>wickr_packet_header_t* wickr_packet_header_create</definition>
        <argsstring>(wickr_ec_key_t *sender_pub, wickr_exchange_array_t *exchanges)</argsstring>
        <name>wickr_packet_header_create</name>
        <param>
          <type><ref refid="structwickr__ec__key" kindref="compound">wickr_ec_key_t</ref> *</type>
          <declname>sender_pub</declname>
        </param>
        <param>
          <type>wickr_exchange_array_t *</type>
          <declname>exchanges</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a packet header from components</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sender_pub</parametername>
</parameternamelist>
<parameterdescription>
<para>see &apos;<ref refid="structwickr__packet__header" kindref="compound">wickr_packet_header</ref>&apos; property documentation property documentation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exchanges</parametername>
</parameternamelist>
<parameterdescription>
<para>see &apos;<ref refid="structwickr__packet__header" kindref="compound">wickr_packet_header</ref>&apos; property documentation property documentation </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a newly allocated packet header owning the properties passed in </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="319" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__protocol_1gac9fab2b713e40a607735bcce0befee96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__key__exchange" kindref="compound">wickr_key_exchange_t</ref> *</type>
        <definition>wickr_key_exchange_t* wickr_packet_header_find</definition>
        <argsstring>(const wickr_packet_header_t *header, const wickr_buffer_t *node_id)</argsstring>
        <name>wickr_packet_header_find</name>
        <param>
          <type>const <ref refid="structwickr__packet__header" kindref="compound">wickr_packet_header_t</ref> *</type>
          <declname>header</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
          <declname>node_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find a particular entry in the exchange list of a packet header</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>header</parametername>
</parameternamelist>
<parameterdescription>
<para>the header to search </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>the node identifier of the exchange to find </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the key exchange for &apos;node_id&apos; or NULL if it cannot be found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="330" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__protocol_1ga5ffb8763c9ebf2ad7322d507d117d7ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__packet__header" kindref="compound">wickr_packet_header_t</ref> *</type>
        <definition>wickr_packet_header_t* wickr_packet_header_copy</definition>
        <argsstring>(const wickr_packet_header_t *source)</argsstring>
        <name>wickr_packet_header_copy</name>
        <param>
          <type>const <ref refid="structwickr__packet__header" kindref="compound">wickr_packet_header_t</ref> *</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy a packet header</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>the packet header to copy </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a newly allocated packet header holding a deep copy of the properties of &apos;source&apos; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="341" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__protocol_1gacb41cb9ad58871f01d8660e3ab115f4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wickr_packet_header_destroy</definition>
        <argsstring>(wickr_packet_header_t **header)</argsstring>
        <name>wickr_packet_header_destroy</name>
        <param>
          <type><ref refid="structwickr__packet__header" kindref="compound">wickr_packet_header_t</ref> **</type>
          <declname>header</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy a packet header</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>header</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to the packet header to destroy. All properties of &apos;*header&apos; will also be destroyed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="351" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__protocol_1ga3495440a494c33a38ce4154b400e9809" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__cipher__result" kindref="compound">wickr_cipher_result_t</ref> *</type>
        <definition>wickr_cipher_result_t* wickr_packet_header_encrypt</definition>
        <argsstring>(const wickr_packet_header_t *header, const wickr_crypto_engine_t *engine, const wickr_cipher_key_t *header_key)</argsstring>
        <name>wickr_packet_header_encrypt</name>
        <param>
          <type>const <ref refid="structwickr__packet__header" kindref="compound">wickr_packet_header_t</ref> *</type>
          <declname>header</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__crypto__engine" kindref="compound">wickr_crypto_engine_t</ref> *</type>
          <declname>engine</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__cipher__key" kindref="compound">wickr_cipher_key_t</ref> *</type>
          <declname>header_key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Serialize-Then-Encrypt a packet header</para><para>Packet headers are serialized using protocol buffers (message.pb-c.h)</para><para>NOTE: This is a low level function that should not be called directly from this API if it can be avoided. Please use the &apos;<ref refid="structwickr__ctx" kindref="compound">wickr_ctx</ref>&apos; API instead since it is a higher level and safer set of functions</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>header</parametername>
</parameternamelist>
<parameterdescription>
<para>the header to encrypt </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>engine</parametername>
</parameternamelist>
<parameterdescription>
<para>a crypto engine capable of encryption using header_key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>header_key</parametername>
</parameternamelist>
<parameterdescription>
<para>the key to encrypt the header with </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an encrypted header </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="368" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__protocol_1ga53ff33471ac0c4c7e3feedfcce520639" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__packet__header" kindref="compound">wickr_packet_header_t</ref> *</type>
        <definition>wickr_packet_header_t* wickr_packet_header_create_from_cipher</definition>
        <argsstring>(const wickr_crypto_engine_t *engine, const wickr_cipher_result_t *cipher_result, const wickr_cipher_key_t *header_key)</argsstring>
        <name>wickr_packet_header_create_from_cipher</name>
        <param>
          <type>const <ref refid="structwickr__crypto__engine" kindref="compound">wickr_crypto_engine_t</ref> *</type>
          <declname>engine</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__cipher__result" kindref="compound">wickr_cipher_result_t</ref> *</type>
          <declname>cipher_result</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__cipher__key" kindref="compound">wickr_cipher_key_t</ref> *</type>
          <declname>header_key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Decrypt-Then-Deserialize a packet header</para><para>NOTE: This is a low level function that should not be called directly from this API if it can be avoided. Please use the &apos;<ref refid="structwickr__ctx" kindref="compound">wickr_ctx</ref>&apos; API instead since it is a higher level and safer set of functions</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>engine</parametername>
</parameternamelist>
<parameterdescription>
<para>a crypto engine capable of decryption using header_key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipher_result</parametername>
</parameternamelist>
<parameterdescription>
<para>an encrypted packet header </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>header_key</parametername>
</parameternamelist>
<parameterdescription>
<para>the key to use for decryption </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a decrypted packet header or NULL if the decryption key is incorrect </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="384" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__protocol_1gad7d51d39a8477d87557536ff42399186" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__payload" kindref="compound">wickr_payload_t</ref> *</type>
        <definition>wickr_payload_t* wickr_payload_create</definition>
        <argsstring>(wickr_packet_meta_t *meta, wickr_buffer_t *body)</argsstring>
        <name>wickr_payload_create</name>
        <param>
          <type><ref refid="structwickr__packet__meta" kindref="compound">wickr_packet_meta_t</ref> *</type>
          <declname>meta</declname>
        </param>
        <param>
          <type><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
          <declname>body</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a payload from components</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>meta</parametername>
</parameternamelist>
<parameterdescription>
<para>see &apos;<ref refid="structwickr__payload" kindref="compound">wickr_payload</ref>&apos; property documentation property documentation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>body</parametername>
</parameternamelist>
<parameterdescription>
<para>see &apos;<ref refid="structwickr__payload" kindref="compound">wickr_payload</ref>&apos; property documentation property documentation </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a newly allocated payload owning the properties passed in </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="413" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__protocol_1ga96e1b0eabf307d112985946cbe2f6969" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__payload" kindref="compound">wickr_payload_t</ref> *</type>
        <definition>wickr_payload_t* wickr_payload_copy</definition>
        <argsstring>(const wickr_payload_t *source)</argsstring>
        <name>wickr_payload_copy</name>
        <param>
          <type>const <ref refid="structwickr__payload" kindref="compound">wickr_payload_t</ref> *</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy a payload</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>the payload to copy </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a newly allocated payload holding a deep copy of the properties of &apos;source&apos; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="424" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__protocol_1ga821c48aa748408e47ba2149e1628a487" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wickr_payload_destroy</definition>
        <argsstring>(wickr_payload_t **payload)</argsstring>
        <name>wickr_payload_destroy</name>
        <param>
          <type><ref refid="structwickr__payload" kindref="compound">wickr_payload_t</ref> **</type>
          <declname>payload</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy a payload</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>payload</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to the payload to destroy. All properties of &apos;*payload&apos; will also be destroyed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="434" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__protocol_1ga7e4fd2ad4de22c2f7d6160400d2e15e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__cipher__result" kindref="compound">wickr_cipher_result_t</ref> *</type>
        <definition>wickr_cipher_result_t* wickr_payload_encrypt</definition>
        <argsstring>(const wickr_payload_t *payload, const wickr_crypto_engine_t *engine, const wickr_cipher_key_t *payload_key)</argsstring>
        <name>wickr_payload_encrypt</name>
        <param>
          <type>const <ref refid="structwickr__payload" kindref="compound">wickr_payload_t</ref> *</type>
          <declname>payload</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__crypto__engine" kindref="compound">wickr_crypto_engine_t</ref> *</type>
          <declname>engine</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__cipher__key" kindref="compound">wickr_cipher_key_t</ref> *</type>
          <declname>payload_key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Serialize-Then-Encrypt a payload</para><para>Payloads are serialized using protocol buffers (message.pb-c.h) NOTE: This is a low level function that should not be called directly from this API if it can be avoided. Please use the &apos;<ref refid="structwickr__ctx" kindref="compound">wickr_ctx</ref>&apos; API instead since it is a higher level and safer set of functions</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>payload</parametername>
</parameternamelist>
<parameterdescription>
<para>the payload to encrypt </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>engine</parametername>
</parameternamelist>
<parameterdescription>
<para>a crypto engine capable of encryption using payload_key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>payload_key</parametername>
</parameternamelist>
<parameterdescription>
<para>the key to use for encryption </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an encrypted payload </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="450" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__protocol_1gaeeebf95ba580b92254a91009245028ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__payload" kindref="compound">wickr_payload_t</ref> *</type>
        <definition>wickr_payload_t* wickr_payload_create_from_cipher</definition>
        <argsstring>(const wickr_crypto_engine_t *engine, const wickr_cipher_result_t *cipher_result, const wickr_cipher_key_t *payload_key)</argsstring>
        <name>wickr_payload_create_from_cipher</name>
        <param>
          <type>const <ref refid="structwickr__crypto__engine" kindref="compound">wickr_crypto_engine_t</ref> *</type>
          <declname>engine</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__cipher__result" kindref="compound">wickr_cipher_result_t</ref> *</type>
          <declname>cipher_result</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__cipher__key" kindref="compound">wickr_cipher_key_t</ref> *</type>
          <declname>payload_key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Decrypt-Then-Deserialize</para><para>NOTE: This is a low level function that should not be called directly from this API if it can be avoided. Please use the &apos;<ref refid="structwickr__ctx" kindref="compound">wickr_ctx</ref>&apos; API instead since it is a higher level and safer set of functions</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>engine</parametername>
</parameternamelist>
<parameterdescription>
<para>a crypto engine capable of decryption using payload_key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipher_result</parametername>
</parameternamelist>
<parameterdescription>
<para>an encrypted payload </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>payload_key</parametername>
</parameternamelist>
<parameterdescription>
<para>the key to use for decrypting &apos;cipher_result&apos; </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a payload or NULL if an incorrect key is provided </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="466" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__protocol_1gac952913ddaf848d2def181cd55b30883" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__packet" kindref="compound">wickr_packet_t</ref> *</type>
        <definition>wickr_packet_t* wickr_packet_create</definition>
        <argsstring>(uint8_t version, wickr_buffer_t *content, wickr_ecdsa_result_t *signature)</argsstring>
        <name>wickr_packet_create</name>
        <param>
          <type>uint8_t</type>
          <declname>version</declname>
        </param>
        <param>
          <type><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
          <declname>content</declname>
        </param>
        <param>
          <type><ref refid="structwickr__ecdsa__result" kindref="compound">wickr_ecdsa_result_t</ref> *</type>
          <declname>signature</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a packet from components</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>version</parametername>
</parameternamelist>
<parameterdescription>
<para>see &apos;wickr_protocol&apos; property documentation property documentation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>content</parametername>
</parameternamelist>
<parameterdescription>
<para>see &apos;wickr_protocol&apos; property documentation property documentation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>signature</parametername>
</parameternamelist>
<parameterdescription>
<para>see &apos;wickr_protocol&apos; property documentation property documentation </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a newly allocated packet owning the properties passed in </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="500" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__protocol_1ga3427a40815c9f65a78516405d1b88072" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__packet" kindref="compound">wickr_packet_t</ref> *</type>
        <definition>wickr_packet_t* wickr_packet_create_from_buffer</definition>
        <argsstring>(const wickr_buffer_t *buffer)</argsstring>
        <name>wickr_packet_create_from_buffer</name>
        <param>
          <type>const <ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse a packet from a buffer generated by &apos;wickr_packet_serialize&apos;</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>a buffer output from &apos;wickr_packet_serialize&apos; </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a newly allocated packet using parsed data from &apos;buffer&apos; or NULL if parsing fails </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="510" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__protocol_1gaa983fe863635b69d69d6d86d01443ecf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
        <definition>wickr_buffer_t* wickr_packet_serialize</definition>
        <argsstring>(const wickr_packet_t *packet)</argsstring>
        <name>wickr_packet_serialize</name>
        <param>
          <type>const <ref refid="structwickr__packet" kindref="compound">wickr_packet_t</ref> *</type>
          <declname>packet</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Serialize a packet to a buffer</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>packet</parametername>
</parameternamelist>
<parameterdescription>
<para>the packet to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a buffer representing the packet in the following format: | VERSION (4BITS) SIGNATURE_CURVE_ID (4BITS) | CONTENT | SIGNATURE OF CONTENT | </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="521" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__protocol_1ga0c95ad86819bacf98c11115d748039db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__packet" kindref="compound">wickr_packet_t</ref> *</type>
        <definition>wickr_packet_t* wickr_packet_copy</definition>
        <argsstring>(const wickr_packet_t *source)</argsstring>
        <name>wickr_packet_copy</name>
        <param>
          <type>const <ref refid="structwickr__packet" kindref="compound">wickr_packet_t</ref> *</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy a packet</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>the packet to copy </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a newly allocated packet holding a deep copy of the properties of &apos;source&apos; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="532" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__protocol_1gab15d7556ad2806aa823ec2d3e3bf5a46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wickr_packet_destroy</definition>
        <argsstring>(wickr_packet_t **packet)</argsstring>
        <name>wickr_packet_destroy</name>
        <param>
          <type><ref refid="structwickr__packet" kindref="compound">wickr_packet_t</ref> **</type>
          <declname>packet</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy a packet</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>packet</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to the packet to destroy. All properties of &apos;*packet&apos; will also be destroyed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="542" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__protocol_1gac2673bcfeae2f8d693e523809bb6bb30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__parse__result" kindref="compound">wickr_parse_result_t</ref> *</type>
        <definition>wickr_parse_result_t* wickr_parse_result_create_failure</definition>
        <argsstring>(wickr_packet_signature_status signature_status, wickr_decode_error error)</argsstring>
        <name>wickr_parse_result_create_failure</name>
        <param>
          <type>wickr_packet_signature_status</type>
          <declname>signature_status</declname>
        </param>
        <param>
          <type>wickr_decode_error</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a negative parse result due to a failure</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>signature_status</parametername>
</parameternamelist>
<parameterdescription>
<para>status of packet signature validation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>error message related to parsing the packet </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a parse result containing the provided status information and NULL properties </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="579" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__protocol_1gae9d6837e2cea5b64993c124e671bd25f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__parse__result" kindref="compound">wickr_parse_result_t</ref> *</type>
        <definition>wickr_parse_result_t* wickr_parse_result_create_success</definition>
        <argsstring>(wickr_packet_header_t *header, wickr_key_exchange_t *key_exchange, wickr_cipher_result_t *enc_payload)</argsstring>
        <name>wickr_parse_result_create_success</name>
        <param>
          <type><ref refid="structwickr__packet__header" kindref="compound">wickr_packet_header_t</ref> *</type>
          <declname>header</declname>
        </param>
        <param>
          <type><ref refid="structwickr__key__exchange" kindref="compound">wickr_key_exchange_t</ref> *</type>
          <declname>key_exchange</declname>
        </param>
        <param>
          <type><ref refid="structwickr__cipher__result" kindref="compound">wickr_cipher_result_t</ref> *</type>
          <declname>enc_payload</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a positive parse result</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>header</parametername>
</parameternamelist>
<parameterdescription>
<para>the parsed header information </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_exchange</parametername>
</parameternamelist>
<parameterdescription>
<para>discovered key exchange for a particular requested node, or NULL if no node was specified </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enc_payload</parametername>
</parameternamelist>
<parameterdescription>
<para>the encrypted payload parsed from the message </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a parse result containing the provided information and non-error codes for &apos;signature_status&apos; and &apos;err&apos; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="592" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__protocol_1ga1671066ddc19b38ed05d4460d5a96706" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__parse__result" kindref="compound">wickr_parse_result_t</ref> *</type>
        <definition>wickr_parse_result_t* wickr_parse_result_copy</definition>
        <argsstring>(const wickr_parse_result_t *source)</argsstring>
        <name>wickr_parse_result_copy</name>
        <param>
          <type>const <ref refid="structwickr__parse__result" kindref="compound">wickr_parse_result_t</ref> *</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy a parse result</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>the parse result to copy </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a newly allocated parse result holding a deep copy of the properties of &apos;source&apos; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="605" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__protocol_1ga706d39419c8991f417f37f556cee8df9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wickr_parse_result_destroy</definition>
        <argsstring>(wickr_parse_result_t **result)</argsstring>
        <name>wickr_parse_result_destroy</name>
        <param>
          <type><ref refid="structwickr__parse__result" kindref="compound">wickr_parse_result_t</ref> **</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy a parse result</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to the parse result to destroy. All properties of &apos;*result&apos; will also be destroyed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="615" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__protocol_1ga2bd6f49ed993d2290aaafa514eba43ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__decode__result" kindref="compound">wickr_decode_result_t</ref> *</type>
        <definition>wickr_decode_result_t* wickr_decode_result_create_failure</definition>
        <argsstring>(wickr_decode_error decode_error)</argsstring>
        <name>wickr_decode_result_create_failure</name>
        <param>
          <type>wickr_decode_error</type>
          <declname>decode_error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a negative decode result</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>decode_error</parametername>
</parameternamelist>
<parameterdescription>
<para>the error found during decoding </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a newly allocated decode result with error &apos;decode_error&apos; and NULL for other properties </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="644" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__protocol_1ga633aaf4cb6159be0110401f06dae458c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__decode__result" kindref="compound">wickr_decode_result_t</ref> *</type>
        <definition>wickr_decode_result_t* wickr_decode_result_create_success</definition>
        <argsstring>(wickr_payload_t *decrypted_payload, wickr_cipher_key_t *payload_key)</argsstring>
        <name>wickr_decode_result_create_success</name>
        <param>
          <type><ref refid="structwickr__payload" kindref="compound">wickr_payload_t</ref> *</type>
          <declname>decrypted_payload</declname>
        </param>
        <param>
          <type><ref refid="structwickr__cipher__key" kindref="compound">wickr_cipher_key_t</ref> *</type>
          <declname>payload_key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a positive decode result</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>decrypted_payload</parametername>
</parameternamelist>
<parameterdescription>
<para>the decrypted payload found during decoding </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>payload_key</parametername>
</parameternamelist>
<parameterdescription>
<para>the payload key derived during decoding </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a newly allocated decode result with no error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="655" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__protocol_1ga36183bf96372661f890aefbe388bd32a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__decode__result" kindref="compound">wickr_decode_result_t</ref> *</type>
        <definition>wickr_decode_result_t* wickr_decode_result_copy</definition>
        <argsstring>(const wickr_decode_result_t *result)</argsstring>
        <name>wickr_decode_result_copy</name>
        <param>
          <type>const <ref refid="structwickr__decode__result" kindref="compound">wickr_decode_result_t</ref> *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy a decode result</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>the decode result to copy </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a newly allocated decode result holding a deep copy of the properties of &apos;source&apos; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="667" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__protocol_1ga94154ab44a6c2e9b97a115e37416efe1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wickr_decode_result_destroy</definition>
        <argsstring>(wickr_decode_result_t **result)</argsstring>
        <name>wickr_decode_result_destroy</name>
        <param>
          <type><ref refid="structwickr__decode__result" kindref="compound">wickr_decode_result_t</ref> **</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy a decode result</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to the decode result to destroy. All properties of &apos;*result&apos; will also be destroyed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="677" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__protocol_1gaf34d8082df52a7ade2fea54eea65d342" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__packet" kindref="compound">wickr_packet_t</ref> *</type>
        <definition>wickr_packet_t* wickr_packet_create_from_components</definition>
        <argsstring>(const wickr_crypto_engine_t *engine, const wickr_cipher_key_t *header_key, const wickr_cipher_key_t *payload_key, wickr_ec_key_t *exchange_key, const wickr_payload_t *payload, const wickr_node_array_t *recipients, const wickr_identity_chain_t *sender_signing_identity, uint8_t version)</argsstring>
        <name>wickr_packet_create_from_components</name>
        <param>
          <type>const <ref refid="structwickr__crypto__engine" kindref="compound">wickr_crypto_engine_t</ref> *</type>
          <declname>engine</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__cipher__key" kindref="compound">wickr_cipher_key_t</ref> *</type>
          <declname>header_key</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__cipher__key" kindref="compound">wickr_cipher_key_t</ref> *</type>
          <declname>payload_key</declname>
        </param>
        <param>
          <type><ref refid="structwickr__ec__key" kindref="compound">wickr_ec_key_t</ref> *</type>
          <declname>exchange_key</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__payload" kindref="compound">wickr_payload_t</ref> *</type>
          <declname>payload</declname>
        </param>
        <param>
          <type>const wickr_node_array_t *</type>
          <declname>recipients</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__identity__chain" kindref="compound">wickr_identity_chain_t</ref> *</type>
          <declname>sender_signing_identity</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>version</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generate a packet given components</para><para>For more information see Wickr white paper (Sending a Message)</para><para>NOTE: This is a low level function that should not be called directly from this API if it can be avoided. Please use the &apos;<ref refid="structwickr__ctx" kindref="compound">wickr_ctx</ref>&apos; API instead since it is a higher level and safer set of functions</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>engine</parametername>
</parameternamelist>
<parameterdescription>
<para>a crypto engine capable of ECDH and signing operations using exchange_key, and cipher operations using payload_key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>header_key</parametername>
</parameternamelist>
<parameterdescription>
<para>the key to encrypt the header of the message with </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>payload_key</parametername>
</parameternamelist>
<parameterdescription>
<para>the key to encrypt the payload of the message with </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exchange_key</parametername>
</parameternamelist>
<parameterdescription>
<para>the key to use as the local key exchange keypair, the public side of this key will wind up in the resulting packet header </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>payload</parametername>
</parameternamelist>
<parameterdescription>
<para>the plaintext payload to encrypt and bundle into the packet </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recipients</parametername>
</parameternamelist>
<parameterdescription>
<para>the array of nodes that the </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sender_signing_identity</parametername>
</parameternamelist>
<parameterdescription>
<para>the identity chain belonging to the creator of the packet </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a &apos;sender_signing_identity&apos; signed packet containing encrypted payload &apos;payload, and header containing key exchanges for &apos;recipients&apos; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="697" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__protocol_1ga1654ef299f9189b27e5e58485f1ffcf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__parse__result" kindref="compound">wickr_parse_result_t</ref> *</type>
        <definition>wickr_parse_result_t* wickr_parse_result_from_packet</definition>
        <argsstring>(const wickr_crypto_engine_t *engine, const wickr_packet_t *packet, const wickr_buffer_t *receiver_node_id, wickr_header_keygen_func header_keygen_func, const wickr_identity_chain_t *sender_signing_identity)</argsstring>
        <name>wickr_parse_result_from_packet</name>
        <param>
          <type>const <ref refid="structwickr__crypto__engine" kindref="compound">wickr_crypto_engine_t</ref> *</type>
          <declname>engine</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__packet" kindref="compound">wickr_packet_t</ref> *</type>
          <declname>packet</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
          <declname>receiver_node_id</declname>
        </param>
        <param>
          <type>wickr_header_keygen_func</type>
          <declname>header_keygen_func</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__identity__chain" kindref="compound">wickr_identity_chain_t</ref> *</type>
          <declname>sender_signing_identity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse a received packet and validate it&apos;s signature</para><para>For more information see Wickr white paper (Receiving a Message 1-5)</para><para>NOTE: This is a low level function that should not be called directly from this API if it can be avoided. Please use the &apos;<ref refid="structwickr__ctx" kindref="compound">wickr_ctx</ref>&apos; API instead since it is a higher level and safer set of functions</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>engine</parametername>
</parameternamelist>
<parameterdescription>
<para>a crypto engine </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>packet</parametername>
</parameternamelist>
<parameterdescription>
<para>the packet to parse </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>receiver_node_id</parametername>
</parameternamelist>
<parameterdescription>
<para>node_id of the recipient. If set, parsing will fail if a node_id labeled key exchange is not found in the decoded header&apos;s key exchange list. If not set, the resulting parse result will contain NULL for the key exchange and simply return all other properties </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>header_keygen_func</parametername>
</parameternamelist>
<parameterdescription>
<para>a function that can generate a header key for this packet </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sender_signing_identity</parametername>
</parameternamelist>
<parameterdescription>
<para>the sender of the packet </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a parse result containing a successful or unsuccessful error and signature status </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="724" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__wickr__protocol_1ga32d9da2e10d1d653b2ac894d50aaedb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwickr__decode__result" kindref="compound">wickr_decode_result_t</ref> *</type>
        <definition>wickr_decode_result_t* wickr_decode_result_from_parse_result</definition>
        <argsstring>(const wickr_packet_t *packet, const wickr_crypto_engine_t *engine, const wickr_parse_result_t *parse_result, wickr_buffer_t *receiver_dev_id, wickr_ec_key_t *receiver_decode_key, wickr_identity_chain_t *receiver_signing_identity, const wickr_identity_chain_t *sender_signing_identity)</argsstring>
        <name>wickr_decode_result_from_parse_result</name>
        <param>
          <type>const <ref refid="structwickr__packet" kindref="compound">wickr_packet_t</ref> *</type>
          <declname>packet</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__crypto__engine" kindref="compound">wickr_crypto_engine_t</ref> *</type>
          <declname>engine</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__parse__result" kindref="compound">wickr_parse_result_t</ref> *</type>
          <declname>parse_result</declname>
        </param>
        <param>
          <type><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref> *</type>
          <declname>receiver_dev_id</declname>
        </param>
        <param>
          <type><ref refid="structwickr__ec__key" kindref="compound">wickr_ec_key_t</ref> *</type>
          <declname>receiver_decode_key</declname>
        </param>
        <param>
          <type><ref refid="structwickr__identity__chain" kindref="compound">wickr_identity_chain_t</ref> *</type>
          <declname>receiver_signing_identity</declname>
        </param>
        <param>
          <type>const <ref refid="structwickr__identity__chain" kindref="compound">wickr_identity_chain_t</ref> *</type>
          <declname>sender_signing_identity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Decode a parsed packet payload using a fetched ephemeral decode_key</para><para>For more information see Wickr white paper (Receiving a Message 6-9)</para><para>NOTE: This is a low level function that should not be called directly from this API if it can be avoided. Please use the &apos;<ref refid="structwickr__ctx" kindref="compound">wickr_ctx</ref>&apos; API instead since it is a higher level and safer set of functions</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>packet</parametername>
</parameternamelist>
<parameterdescription>
<para>the packet to decode </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>engine</parametername>
</parameternamelist>
<parameterdescription>
<para>a crypto engine </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_result</parametername>
</parameternamelist>
<parameterdescription>
<para>a previously generated parse result from &apos;packet&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>receiver_dev_id</parametername>
</parameternamelist>
<parameterdescription>
<para>the &apos;msg_proto_id&apos; of &apos;<ref refid="structwickr__dev__info" kindref="compound">wickr_dev_info</ref>&apos; of the recipient </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>receiver_decode_key</parametername>
</parameternamelist>
<parameterdescription>
<para>the key to attempt to complete the key exchange for discovered in the parse phase, so that the payload can be decoded </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>receiver_signing_identity</parametername>
</parameternamelist>
<parameterdescription>
<para>the recipient of the packet </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sender_signing_identity</parametername>
</parameternamelist>
<parameterdescription>
<para>the sender of the packet used </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a decode result containing decrypted packet information if decode succeeded </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/crypto/protocol.h" line="748" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>©<sp/>2012-2017<sp/>Wickr<sp/>Inc.<sp/><sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>This<sp/>code<sp/>is<sp/>being<sp/>released<sp/>for<sp/>EDUCATIONAL,<sp/>ACADEMIC,<sp/>AND<sp/>CODE<sp/>REVIEW<sp/>PURPOSES</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>ONLY.<sp/><sp/>COMMERCIAL<sp/>USE<sp/>OF<sp/>THE<sp/>CODE<sp/>IS<sp/>EXPRESSLY<sp/>PROHIBITED.<sp/><sp/>For<sp/>additional<sp/>details,</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>please<sp/>see<sp/>LICENSE</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>THE<sp/>CODE<sp/>IS<sp/>MADE<sp/>AVAILABLE<sp/>&quot;AS-IS&quot;<sp/>AND<sp/>WITHOUT<sp/>ANY<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>GUARANTEES<sp/>AS<sp/>TO<sp/>FITNESS,<sp/>MERCHANTABILITY,<sp/>NON-</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>INFRINGEMENT<sp/>OR<sp/>OTHERWISE.<sp/>IT<sp/>IS<sp/>NOT<sp/>BEING<sp/>PROVIDED<sp/>IN<sp/>TRADE<sp/>BUT<sp/>ON</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>A<sp/>VOLUNTARY<sp/>BASIS<sp/>ON<sp/>BEHALF<sp/>OF<sp/>THE<sp/>AUTHOR’S<sp/>PART<sp/>FOR<sp/>THE<sp/>BENEFIT</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>OF<sp/>THE<sp/>LICENSEE<sp/>AND<sp/>IS<sp/>NOT<sp/>MADE<sp/>AVAILABLE<sp/>FOR<sp/>CONSUMER<sp/>USE<sp/>OR<sp/>ANY</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>OTHER<sp/>USE<sp/>OUTSIDE<sp/>THE<sp/>TERMS<sp/>OF<sp/>THIS<sp/>LICENSE.<sp/>ANYONE<sp/>ACCESSING<sp/>THE</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>CODE<sp/>SHOULD<sp/>HAVE<sp/>THE<sp/>REQUISITE<sp/>EXPERTISE<sp/>TO<sp/>SECURE<sp/>THEIR<sp/>SYSTEM</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>AND<sp/>DEVICES<sp/>AND<sp/>TO<sp/>ACCESS<sp/>AND<sp/>USE<sp/>THE<sp/>CODE<sp/>FOR<sp/>REVIEW<sp/>PURPOSES</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>ONLY.<sp/>LICENSEE<sp/>BEARS<sp/>THE<sp/>RISK<sp/>OF<sp/>ACCESSING<sp/>AND<sp/>USING<sp/>THE<sp/>CODE.<sp/>IN</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>PARTICULAR,<sp/>AUTHOR<sp/>BEARS<sp/>NO<sp/>LIABILITY<sp/>FOR<sp/>ANY<sp/>INTERFERENCE<sp/>WITH<sp/>OR</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>ADVERSE<sp/>EFFECT<sp/>THAT<sp/>MAY<sp/>OCCUR<sp/>AS<sp/>A<sp/>RESULT<sp/>OF<sp/>THE<sp/>LICENSEE</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>ACCESSING<sp/>AND/OR<sp/>USING<sp/>THE<sp/>CODE<sp/>ON<sp/>LICENSEE’S<sp/>SYSTEM.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>protocol_h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>protocol_h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;node.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ecdh.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="group__wickr__protocol_1gad269883d0b8b26c4fa52da595ef5ddf7" refkind="member"><highlight class="preprocessor">#define<sp/>OLDEST_PACKET_VERSION<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="group__wickr__protocol_1ga89ff9f93c5494db53d3ff27353989862" refkind="member"><highlight class="preprocessor">#define<sp/>CURRENT_PACKET_VERSION<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>E_SUCCESS,</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>ERROR_INVALID_INPUT,</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>ERROR_NODE_NOT_FOUND,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>ERROR_CORRUPT_PACKET,</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>ERROR_KEY_EXCHANGE_FAILED,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>ERROR_MAC_INVALID</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}<sp/>wickr_decode_error;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>PACKET_SIGNATURE_UNKNOWN,</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>PACKET_SIGNATURE_VALID,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>PACKET_SIGNATURE_INVALID</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}<sp/>wickr_packet_signature_status;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="structwickr__ephemeral__info" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structwickr__ephemeral__info" kindref="compound">wickr_ephemeral_info</ref><sp/>{</highlight></codeline>
<codeline lineno="74" refid="structwickr__ephemeral__info_1ac7936b5b7b83dd24ab6b68e8dd2dd6ba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="structwickr__ephemeral__info_1ac7936b5b7b83dd24ab6b68e8dd2dd6ba" kindref="member">ttl</ref>;</highlight></codeline>
<codeline lineno="75" refid="structwickr__ephemeral__info_1a0bfb5badb8bdcfac1ace1ef2026c86ac" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="structwickr__ephemeral__info_1a0bfb5badb8bdcfac1ace1ef2026c86ac" kindref="member">bor</ref>;</highlight></codeline>
<codeline lineno="76"><highlight class="normal">};</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structwickr__ephemeral__info" kindref="compound">wickr_ephemeral_info</ref><sp/><ref refid="structwickr__ephemeral__info" kindref="compound">wickr_ephemeral_info_t</ref>;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="structwickr__packet__meta" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structwickr__packet__meta" kindref="compound">wickr_packet_meta</ref><sp/>{</highlight></codeline>
<codeline lineno="93" refid="structwickr__packet__meta_1a0ef43c179038ba036fc9db17976b8b1e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structwickr__ephemeral__info" kindref="compound">wickr_ephemeral_info_t</ref><sp/><ref refid="structwickr__packet__meta_1a0ef43c179038ba036fc9db17976b8b1e" kindref="member">ephemerality_settings</ref>;</highlight></codeline>
<codeline lineno="94" refid="structwickr__packet__meta_1ab160a2ecfc6146ddf2ce40fe301c8ce9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref><sp/>*<ref refid="structwickr__packet__meta_1ab160a2ecfc6146ddf2ce40fe301c8ce9" kindref="member">channel_tag</ref>;</highlight></codeline>
<codeline lineno="95" refid="structwickr__packet__meta_1ada659f7c31d257c76edab5db52973f6e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/><ref refid="structwickr__packet__meta_1ada659f7c31d257c76edab5db52973f6e" kindref="member">content_type</ref>;</highlight></codeline>
<codeline lineno="96"><highlight class="normal">};</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structwickr__packet__meta" kindref="compound">wickr_packet_meta</ref><sp/><ref refid="structwickr__packet__meta" kindref="compound">wickr_packet_meta_t</ref>;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><ref refid="structwickr__packet__meta" kindref="compound">wickr_packet_meta_t</ref><sp/>*<ref refid="group__wickr__protocol_1ga146144d74da12c1fff766462fe7fa661" kindref="member">wickr_packet_meta_create</ref>(<ref refid="structwickr__ephemeral__info" kindref="compound">wickr_ephemeral_info_t</ref><sp/><ref refid="structwickr__packet__meta_1a0ef43c179038ba036fc9db17976b8b1e" kindref="member">ephemerality_settings</ref>,</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref><sp/>*<ref refid="structwickr__packet__meta_1ab160a2ecfc6146ddf2ce40fe301c8ce9" kindref="member">channel_tag</ref>,</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/><ref refid="structwickr__packet__meta_1ada659f7c31d257c76edab5db52973f6e" kindref="member">content_type</ref>);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><ref refid="structwickr__packet__meta" kindref="compound">wickr_packet_meta_t</ref><sp/>*<ref refid="group__wickr__protocol_1ga1bb5a0f2a49069679b174b3e6521fe9b" kindref="member">wickr_packet_meta_copy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwickr__packet__meta" kindref="compound">wickr_packet_meta_t</ref><sp/>*source);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__wickr__protocol_1gad165ad670da761478cf5f8f91223c1d3" kindref="member">wickr_packet_meta_destroy</ref>(<ref refid="structwickr__packet__meta" kindref="compound">wickr_packet_meta_t</ref><sp/>**meta);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="147" refid="structwickr__key__exchange" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structwickr__key__exchange" kindref="compound">wickr_key_exchange</ref><sp/>{</highlight></codeline>
<codeline lineno="148" refid="structwickr__key__exchange_1ad5b271c9c3cf2043ec85dbb40c51fec6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref><sp/>*<ref refid="structwickr__key__exchange_1ad5b271c9c3cf2043ec85dbb40c51fec6" kindref="member">node_id</ref>;</highlight></codeline>
<codeline lineno="149" refid="structwickr__key__exchange_1aa400c601e6a24cdffeb627501d36cd3e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="structwickr__key__exchange_1aa400c601e6a24cdffeb627501d36cd3e" kindref="member">ephemeral_key_id</ref>;</highlight></codeline>
<codeline lineno="150" refid="structwickr__key__exchange_1a6be89562df814a32b19cd57c49037691" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref><sp/>*<ref refid="structwickr__key__exchange_1a6be89562df814a32b19cd57c49037691" kindref="member">exchange_data</ref>;</highlight></codeline>
<codeline lineno="151"><highlight class="normal">};</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structwickr__key__exchange" kindref="compound">wickr_key_exchange</ref><sp/><ref refid="structwickr__key__exchange" kindref="compound">wickr_key_exchange_t</ref>;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><ref refid="structwickr__key__exchange" kindref="compound">wickr_key_exchange_t</ref><sp/>*<ref refid="group__wickr__protocol_1gac2823b3430070b0db9ef1f40d3a804ea" kindref="member">wickr_key_exchange_create</ref>(<ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref><sp/>*<ref refid="structwickr__key__exchange_1ad5b271c9c3cf2043ec85dbb40c51fec6" kindref="member">node_id</ref>,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="structwickr__key__exchange_1aa400c601e6a24cdffeb627501d36cd3e" kindref="member">ephemeral_key_id</ref>,</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref><sp/>*<ref refid="structwickr__key__exchange_1a6be89562df814a32b19cd57c49037691" kindref="member">exchange_data</ref>);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><ref refid="structwickr__key__exchange" kindref="compound">wickr_key_exchange_t</ref><sp/>*<ref refid="group__wickr__protocol_1gae031f68d2286e0399d90b0316a7d5299" kindref="member">wickr_key_exchange_create_from_components</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwickr__crypto__engine" kindref="compound">wickr_crypto_engine_t</ref><sp/>*engine,</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwickr__identity__chain" kindref="compound">wickr_identity_chain_t</ref><sp/>*sender,</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwickr__node" kindref="compound">wickr_node_t</ref><sp/>*receiver,</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structwickr__ec__key" kindref="compound">wickr_ec_key_t</ref><sp/>*packet_exchange_key,</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwickr__cipher__key" kindref="compound">wickr_cipher_key_t</ref><sp/>*packet_key,</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>version);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><ref refid="structwickr__cipher__key" kindref="compound">wickr_cipher_key_t</ref><sp/>*wickr_key_exchange_derive_packet_key(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwickr__crypto__engine" kindref="compound">wickr_crypto_engine_t</ref><sp/>*engine,</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwickr__identity__chain" kindref="compound">wickr_identity_chain_t</ref><sp/>*sender,</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwickr__node" kindref="compound">wickr_node_t</ref><sp/>*receiver,</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structwickr__ec__key" kindref="compound">wickr_ec_key_t</ref><sp/>*packet_exchange_key,</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwickr__key__exchange" kindref="compound">wickr_key_exchange_t</ref><sp/>*exchange,</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>version);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><ref refid="structwickr__key__exchange" kindref="compound">wickr_key_exchange_t</ref><sp/>*<ref refid="group__wickr__protocol_1ga2235a7c168e3806aa1a71b5a5c8dee48" kindref="member">wickr_key_exchange_copy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwickr__key__exchange" kindref="compound">wickr_key_exchange_t</ref><sp/>*source);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__wickr__protocol_1ga54b6481f8f4b61fb949bec17d47cd3de" kindref="member">wickr_key_exchange_destroy</ref>(<ref refid="structwickr__key__exchange" kindref="compound">wickr_key_exchange_t</ref><sp/>**exchange);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>wickr_array_t<sp/>wickr_exchange_array_t;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal">wickr_exchange_array_t<sp/>*<ref refid="group__wickr__protocol_1ga907d700b76b748f80796b4404c7172c2" kindref="member">wickr_exchange_array_new</ref>(uint32_t<sp/>exchange_count);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__wickr__protocol_1gad3c6687c07ae5e66efcbc55da0febd85" kindref="member">wickr_exchange_array_set_item</ref>(wickr_exchange_array_t<sp/>*array,<sp/>uint32_t<sp/>index,<sp/><ref refid="structwickr__key__exchange" kindref="compound">wickr_key_exchange_t</ref><sp/>*exchange);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><ref refid="structwickr__key__exchange" kindref="compound">wickr_key_exchange_t</ref><sp/>*<ref refid="group__wickr__protocol_1ga333510c3c7eeb8e33f94495de6bb122d" kindref="member">wickr_exchange_array_fetch_item</ref>(wickr_exchange_array_t<sp/>*array,<sp/>uint32_t<sp/>index);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal">wickr_array_t<sp/>*<ref refid="group__wickr__protocol_1gacd04405337871aa3bcd550a051d778e1" kindref="member">wickr_exchange_array_copy</ref>(wickr_exchange_array_t<sp/>*array);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__wickr__protocol_1gadc1e5f5836bc09c1d6b8d6203d02a0eb" kindref="member">wickr_exchange_array_destroy</ref>(wickr_exchange_array_t<sp/>**array);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="303" refid="structwickr__packet__header" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structwickr__packet__header" kindref="compound">wickr_packet_header</ref><sp/>{</highlight></codeline>
<codeline lineno="304" refid="structwickr__packet__header_1aa32926d47dd2639030523593bfefc998" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structwickr__ec__key" kindref="compound">wickr_ec_key_t</ref><sp/>*<ref refid="structwickr__packet__header_1aa32926d47dd2639030523593bfefc998" kindref="member">sender_pub</ref>;</highlight></codeline>
<codeline lineno="305" refid="structwickr__packet__header_1a49af3b4865a9deee0e60883134ebbb83" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>wickr_exchange_array_t<sp/>*<ref refid="structwickr__packet__header_1a49af3b4865a9deee0e60883134ebbb83" kindref="member">exchanges</ref>;</highlight></codeline>
<codeline lineno="306"><highlight class="normal">};</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structwickr__packet__header" kindref="compound">wickr_packet_header</ref><sp/><ref refid="structwickr__packet__header" kindref="compound">wickr_packet_header_t</ref>;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><ref refid="structwickr__packet__header" kindref="compound">wickr_packet_header_t</ref><sp/>*<ref refid="group__wickr__protocol_1ga8ad519d1b5dc3960c426db9a556404e1" kindref="member">wickr_packet_header_create</ref>(<ref refid="structwickr__ec__key" kindref="compound">wickr_ec_key_t</ref><sp/>*<ref refid="structwickr__packet__header_1aa32926d47dd2639030523593bfefc998" kindref="member">sender_pub</ref>,<sp/>wickr_exchange_array_t<sp/>*<ref refid="structwickr__packet__header_1a49af3b4865a9deee0e60883134ebbb83" kindref="member">exchanges</ref>);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><ref refid="structwickr__key__exchange" kindref="compound">wickr_key_exchange_t</ref><sp/>*<ref refid="group__wickr__protocol_1gac9fab2b713e40a607735bcce0befee96" kindref="member">wickr_packet_header_find</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwickr__packet__header" kindref="compound">wickr_packet_header_t</ref><sp/>*header,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref><sp/>*node_id);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><ref refid="structwickr__packet__header" kindref="compound">wickr_packet_header_t</ref><sp/>*<ref refid="group__wickr__protocol_1ga5ffb8763c9ebf2ad7322d507d117d7ba" kindref="member">wickr_packet_header_copy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwickr__packet__header" kindref="compound">wickr_packet_header_t</ref><sp/>*source);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__wickr__protocol_1gacb41cb9ad58871f01d8660e3ab115f4e" kindref="member">wickr_packet_header_destroy</ref>(<ref refid="structwickr__packet__header" kindref="compound">wickr_packet_header_t</ref><sp/>**header);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><ref refid="structwickr__cipher__result" kindref="compound">wickr_cipher_result_t</ref><sp/>*<ref refid="group__wickr__protocol_1ga3495440a494c33a38ce4154b400e9809" kindref="member">wickr_packet_header_encrypt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwickr__packet__header" kindref="compound">wickr_packet_header_t</ref><sp/>*header,</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwickr__crypto__engine" kindref="compound">wickr_crypto_engine_t</ref><sp/>*engine,</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwickr__cipher__key" kindref="compound">wickr_cipher_key_t</ref><sp/>*header_key);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><ref refid="structwickr__packet__header" kindref="compound">wickr_packet_header_t</ref><sp/>*<ref refid="group__wickr__protocol_1ga53ff33471ac0c4c7e3feedfcce520639" kindref="member">wickr_packet_header_create_from_cipher</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwickr__crypto__engine" kindref="compound">wickr_crypto_engine_t</ref><sp/>*engine,</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwickr__cipher__result" kindref="compound">wickr_cipher_result_t</ref><sp/>*cipher_result,</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwickr__cipher__key" kindref="compound">wickr_cipher_key_t</ref><sp/>*header_key);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="397" refid="structwickr__payload" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structwickr__payload" kindref="compound">wickr_payload</ref><sp/>{</highlight></codeline>
<codeline lineno="398" refid="structwickr__payload_1a7df63984a660a0c09c166d60b213213f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structwickr__packet__meta" kindref="compound">wickr_packet_meta_t</ref><sp/>*<ref refid="structwickr__payload_1a7df63984a660a0c09c166d60b213213f" kindref="member">meta</ref>;</highlight></codeline>
<codeline lineno="399" refid="structwickr__payload_1a6ef1b92ffd07c37b86202b4cc88a0522" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref><sp/>*<ref refid="structwickr__payload_1a6ef1b92ffd07c37b86202b4cc88a0522" kindref="member">body</ref>;</highlight></codeline>
<codeline lineno="400"><highlight class="normal">};</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structwickr__payload" kindref="compound">wickr_payload</ref><sp/><ref refid="structwickr__payload" kindref="compound">wickr_payload_t</ref>;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><ref refid="structwickr__payload" kindref="compound">wickr_payload_t</ref><sp/>*<ref refid="group__wickr__protocol_1gad7d51d39a8477d87557536ff42399186" kindref="member">wickr_payload_create</ref>(<ref refid="structwickr__packet__meta" kindref="compound">wickr_packet_meta_t</ref><sp/>*<ref refid="structwickr__payload_1a7df63984a660a0c09c166d60b213213f" kindref="member">meta</ref>,<sp/><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref><sp/>*<ref refid="structwickr__payload_1a6ef1b92ffd07c37b86202b4cc88a0522" kindref="member">body</ref>);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><ref refid="structwickr__payload" kindref="compound">wickr_payload_t</ref><sp/>*<ref refid="group__wickr__protocol_1ga96e1b0eabf307d112985946cbe2f6969" kindref="member">wickr_payload_copy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwickr__payload" kindref="compound">wickr_payload_t</ref><sp/>*source);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__wickr__protocol_1ga821c48aa748408e47ba2149e1628a487" kindref="member">wickr_payload_destroy</ref>(<ref refid="structwickr__payload" kindref="compound">wickr_payload_t</ref><sp/>**payload);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><ref refid="structwickr__cipher__result" kindref="compound">wickr_cipher_result_t</ref><sp/>*<ref refid="group__wickr__protocol_1ga7e4fd2ad4de22c2f7d6160400d2e15e7" kindref="member">wickr_payload_encrypt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwickr__payload" kindref="compound">wickr_payload_t</ref><sp/>*payload,</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwickr__crypto__engine" kindref="compound">wickr_crypto_engine_t</ref><sp/>*engine,</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwickr__cipher__key" kindref="compound">wickr_cipher_key_t</ref><sp/>*payload_key);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><ref refid="structwickr__payload" kindref="compound">wickr_payload_t</ref><sp/>*<ref refid="group__wickr__protocol_1gaeeebf95ba580b92254a91009245028ee" kindref="member">wickr_payload_create_from_cipher</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwickr__crypto__engine" kindref="compound">wickr_crypto_engine_t</ref><sp/>*engine,</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwickr__cipher__result" kindref="compound">wickr_cipher_result_t</ref><sp/>*cipher_result,</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwickr__cipher__key" kindref="compound">wickr_cipher_key_t</ref><sp/>*payload_key);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="482" refid="structwickr__packet" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structwickr__packet" kindref="compound">wickr_packet</ref><sp/>{</highlight></codeline>
<codeline lineno="483" refid="structwickr__packet_1a35c17c926c267a603e810b88961c2bf3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="structwickr__packet_1a35c17c926c267a603e810b88961c2bf3" kindref="member">version</ref>;</highlight></codeline>
<codeline lineno="484" refid="structwickr__packet_1a4d17d017c9d0fbb6e748a7ed935e5512" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref><sp/>*<ref refid="structwickr__packet_1a4d17d017c9d0fbb6e748a7ed935e5512" kindref="member">content</ref>;</highlight></codeline>
<codeline lineno="485" refid="structwickr__packet_1a8b5e9a4eed6f133ffedd1aa9178b5567" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structwickr__ecdsa__result" kindref="compound">wickr_ecdsa_result_t</ref><sp/>*<ref refid="structwickr__packet_1a8b5e9a4eed6f133ffedd1aa9178b5567" kindref="member">signature</ref>;</highlight></codeline>
<codeline lineno="486"><highlight class="normal">};</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structwickr__packet" kindref="compound">wickr_packet</ref><sp/><ref refid="structwickr__packet" kindref="compound">wickr_packet_t</ref>;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><ref refid="structwickr__packet" kindref="compound">wickr_packet_t</ref><sp/>*<ref refid="group__wickr__protocol_1gac952913ddaf848d2def181cd55b30883" kindref="member">wickr_packet_create</ref>(uint8_t<sp/><ref refid="structwickr__packet_1a35c17c926c267a603e810b88961c2bf3" kindref="member">version</ref>,<sp/><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref><sp/>*<ref refid="structwickr__packet_1a4d17d017c9d0fbb6e748a7ed935e5512" kindref="member">content</ref>,<sp/><ref refid="structwickr__ecdsa__result" kindref="compound">wickr_ecdsa_result_t</ref><sp/>*<ref refid="structwickr__packet_1a8b5e9a4eed6f133ffedd1aa9178b5567" kindref="member">signature</ref>);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><ref refid="structwickr__packet" kindref="compound">wickr_packet_t</ref><sp/>*<ref refid="group__wickr__protocol_1ga3427a40815c9f65a78516405d1b88072" kindref="member">wickr_packet_create_from_buffer</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref><sp/>*buffer);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref><sp/>*<ref refid="group__wickr__protocol_1gaa983fe863635b69d69d6d86d01443ecf" kindref="member">wickr_packet_serialize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwickr__packet" kindref="compound">wickr_packet_t</ref><sp/>*packet);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><ref refid="structwickr__packet" kindref="compound">wickr_packet_t</ref><sp/>*<ref refid="group__wickr__protocol_1ga0c95ad86819bacf98c11115d748039db" kindref="member">wickr_packet_copy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwickr__packet" kindref="compound">wickr_packet_t</ref><sp/>*source);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__wickr__protocol_1gab15d7556ad2806aa823ec2d3e3bf5a46" kindref="member">wickr_packet_destroy</ref>(<ref refid="structwickr__packet" kindref="compound">wickr_packet_t</ref><sp/>**packet);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="560" refid="structwickr__parse__result" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structwickr__parse__result" kindref="compound">wickr_parse_result</ref><sp/>{</highlight></codeline>
<codeline lineno="561" refid="structwickr__parse__result_1a69a3ee332921b4fdbc0e07dbfa74a8ed" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>wickr_decode_error<sp/><ref refid="structwickr__parse__result_1a69a3ee332921b4fdbc0e07dbfa74a8ed" kindref="member">err</ref>;</highlight></codeline>
<codeline lineno="562" refid="structwickr__parse__result_1a989166b5471898853f03b9e9c58f69c0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>wickr_packet_signature_status<sp/><ref refid="structwickr__parse__result_1a989166b5471898853f03b9e9c58f69c0" kindref="member">signature_status</ref>;</highlight></codeline>
<codeline lineno="563" refid="structwickr__parse__result_1acf549d7cbae0f227d5aa60c3c5bb12d3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structwickr__packet__header" kindref="compound">wickr_packet_header_t</ref><sp/>*<ref refid="structwickr__parse__result_1acf549d7cbae0f227d5aa60c3c5bb12d3" kindref="member">header</ref>;</highlight></codeline>
<codeline lineno="564" refid="structwickr__parse__result_1ab33e5d00121c229280bbee814ca7ef5a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structwickr__key__exchange" kindref="compound">wickr_key_exchange_t</ref><sp/>*<ref refid="structwickr__parse__result_1ab33e5d00121c229280bbee814ca7ef5a" kindref="member">key_exchange</ref>;</highlight></codeline>
<codeline lineno="565" refid="structwickr__parse__result_1a584d3b94e032f09188ee4006c067c180" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structwickr__cipher__result" kindref="compound">wickr_cipher_result_t</ref><sp/>*<ref refid="structwickr__parse__result_1a584d3b94e032f09188ee4006c067c180" kindref="member">enc_payload</ref>;</highlight></codeline>
<codeline lineno="566"><highlight class="normal">};</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structwickr__parse__result" kindref="compound">wickr_parse_result</ref><sp/><ref refid="structwickr__parse__result" kindref="compound">wickr_parse_result_t</ref>;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><ref refid="structwickr__parse__result" kindref="compound">wickr_parse_result_t</ref><sp/>*<ref refid="group__wickr__protocol_1gac2673bcfeae2f8d693e523809bb6bb30" kindref="member">wickr_parse_result_create_failure</ref>(wickr_packet_signature_status<sp/><ref refid="structwickr__parse__result_1a989166b5471898853f03b9e9c58f69c0" kindref="member">signature_status</ref>,</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wickr_decode_error<sp/>error);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><ref refid="structwickr__parse__result" kindref="compound">wickr_parse_result_t</ref><sp/>*<ref refid="group__wickr__protocol_1gae9d6837e2cea5b64993c124e671bd25f" kindref="member">wickr_parse_result_create_success</ref>(<ref refid="structwickr__packet__header" kindref="compound">wickr_packet_header_t</ref><sp/>*<ref refid="structwickr__parse__result_1acf549d7cbae0f227d5aa60c3c5bb12d3" kindref="member">header</ref>,</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structwickr__key__exchange" kindref="compound">wickr_key_exchange_t</ref><sp/>*<ref refid="structwickr__parse__result_1ab33e5d00121c229280bbee814ca7ef5a" kindref="member">key_exchange</ref>,</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structwickr__cipher__result" kindref="compound">wickr_cipher_result_t</ref><sp/>*<ref refid="structwickr__parse__result_1a584d3b94e032f09188ee4006c067c180" kindref="member">enc_payload</ref>);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><ref refid="structwickr__parse__result" kindref="compound">wickr_parse_result_t</ref><sp/>*<ref refid="group__wickr__protocol_1ga1671066ddc19b38ed05d4460d5a96706" kindref="member">wickr_parse_result_copy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwickr__parse__result" kindref="compound">wickr_parse_result_t</ref><sp/>*source);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__wickr__protocol_1ga706d39419c8991f417f37f556cee8df9" kindref="member">wickr_parse_result_destroy</ref>(<ref refid="structwickr__parse__result" kindref="compound">wickr_parse_result_t</ref><sp/>**result);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="628" refid="structwickr__decode__result" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structwickr__decode__result" kindref="compound">wickr_decode_result</ref><sp/>{</highlight></codeline>
<codeline lineno="629" refid="structwickr__decode__result_1a63449a59c8a8bab451f5ab555be7895d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>wickr_decode_error<sp/><ref refid="structwickr__decode__result_1a63449a59c8a8bab451f5ab555be7895d" kindref="member">err</ref>;</highlight></codeline>
<codeline lineno="630" refid="structwickr__decode__result_1aed31d598b49bf696f286d673246d8b31" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structwickr__cipher__key" kindref="compound">wickr_cipher_key_t</ref><sp/>*<ref refid="structwickr__decode__result_1aed31d598b49bf696f286d673246d8b31" kindref="member">payload_key</ref>;</highlight></codeline>
<codeline lineno="631" refid="structwickr__decode__result_1a0c6e2140859e7d8ad113f1e7ebd95ad4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structwickr__payload" kindref="compound">wickr_payload_t</ref><sp/>*<ref refid="structwickr__decode__result_1a0c6e2140859e7d8ad113f1e7ebd95ad4" kindref="member">decrypted_payload</ref>;</highlight></codeline>
<codeline lineno="632"><highlight class="normal">};</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structwickr__decode__result" kindref="compound">wickr_decode_result</ref><sp/><ref refid="structwickr__decode__result" kindref="compound">wickr_decode_result_t</ref>;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><ref refid="structwickr__decode__result" kindref="compound">wickr_decode_result_t</ref><sp/>*<ref refid="group__wickr__protocol_1ga2bd6f49ed993d2290aaafa514eba43ed" kindref="member">wickr_decode_result_create_failure</ref>(wickr_decode_error<sp/>decode_error);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><ref refid="structwickr__decode__result" kindref="compound">wickr_decode_result_t</ref><sp/>*<ref refid="group__wickr__protocol_1ga633aaf4cb6159be0110401f06dae458c" kindref="member">wickr_decode_result_create_success</ref>(<ref refid="structwickr__payload" kindref="compound">wickr_payload_t</ref><sp/>*<ref refid="structwickr__decode__result_1a0c6e2140859e7d8ad113f1e7ebd95ad4" kindref="member">decrypted_payload</ref>,</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structwickr__cipher__key" kindref="compound">wickr_cipher_key_t</ref><sp/>*<ref refid="structwickr__decode__result_1aed31d598b49bf696f286d673246d8b31" kindref="member">payload_key</ref>);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><ref refid="structwickr__decode__result" kindref="compound">wickr_decode_result_t</ref><sp/>*<ref refid="group__wickr__protocol_1ga36183bf96372661f890aefbe388bd32a" kindref="member">wickr_decode_result_copy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwickr__decode__result" kindref="compound">wickr_decode_result_t</ref><sp/>*result);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__wickr__protocol_1ga94154ab44a6c2e9b97a115e37416efe1" kindref="member">wickr_decode_result_destroy</ref>(<ref refid="structwickr__decode__result" kindref="compound">wickr_decode_result_t</ref><sp/>**result);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><ref refid="structwickr__packet" kindref="compound">wickr_packet_t</ref><sp/>*<ref refid="group__wickr__protocol_1gaf34d8082df52a7ade2fea54eea65d342" kindref="member">wickr_packet_create_from_components</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwickr__crypto__engine" kindref="compound">wickr_crypto_engine_t</ref><sp/>*engine,</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwickr__cipher__key" kindref="compound">wickr_cipher_key_t</ref><sp/>*header_key,</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwickr__cipher__key" kindref="compound">wickr_cipher_key_t</ref><sp/>*<ref refid="structwickr__decode__result_1aed31d598b49bf696f286d673246d8b31" kindref="member">payload_key</ref>,</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structwickr__ec__key" kindref="compound">wickr_ec_key_t</ref><sp/>*exchange_key,</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwickr__payload" kindref="compound">wickr_payload_t</ref><sp/>*payload,</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>wickr_node_array_t<sp/>*recipients,</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwickr__identity__chain" kindref="compound">wickr_identity_chain_t</ref><sp/>*sender_signing_identity,</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>version);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structwickr__cipher__key" kindref="compound">wickr_cipher_key_t</ref><sp/>*(*wickr_header_keygen_func)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwickr__crypto__engine" kindref="compound">wickr_crypto_engine_t</ref><sp/>engine,<sp/><ref refid="structwickr__cipher" kindref="compound">wickr_cipher_t</ref><sp/>cipher,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwickr__identity__chain" kindref="compound">wickr_identity_chain_t</ref><sp/>*id_chain);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><ref refid="structwickr__parse__result" kindref="compound">wickr_parse_result_t</ref><sp/>*<ref refid="group__wickr__protocol_1ga1654ef299f9189b27e5e58485f1ffcf5" kindref="member">wickr_parse_result_from_packet</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwickr__crypto__engine" kindref="compound">wickr_crypto_engine_t</ref><sp/>*engine,</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwickr__packet" kindref="compound">wickr_packet_t</ref><sp/>*packet,</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref><sp/>*receiver_node_id,</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wickr_header_keygen_func<sp/>header_keygen_func,</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwickr__identity__chain" kindref="compound">wickr_identity_chain_t</ref><sp/>*sender_signing_identity);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><ref refid="structwickr__decode__result" kindref="compound">wickr_decode_result_t</ref><sp/>*<ref refid="group__wickr__protocol_1ga32d9da2e10d1d653b2ac894d50aaedb0" kindref="member">wickr_decode_result_from_parse_result</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwickr__packet" kindref="compound">wickr_packet_t</ref><sp/>*packet,</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwickr__crypto__engine" kindref="compound">wickr_crypto_engine_t</ref><sp/>*engine,</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwickr__parse__result" kindref="compound">wickr_parse_result_t</ref><sp/>*parse_result,</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structwickr__buffer" kindref="compound">wickr_buffer_t</ref><sp/>*receiver_dev_id,</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structwickr__ec__key" kindref="compound">wickr_ec_key_t</ref><sp/>*receiver_decode_key,</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structwickr__identity__chain" kindref="compound">wickr_identity_chain_t</ref><sp/>*receiver_signing_identity,</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structwickr__identity__chain" kindref="compound">wickr_identity_chain_t</ref><sp/>*sender_signing_identity);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal">}</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>protocol_h<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="src/crypto/protocol.h"/>
  </compounddef>
</doxygen>
